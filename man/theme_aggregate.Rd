% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/theme_aggregate.R
\name{theme_aggregate}
\alias{theme_aggregate}
\title{Aggregate along theme dimension}
\usage{
theme_aggregate(
  dat,
  from_theme,
  to_theme,
  groupers,
  aggCols,
  funlist,
  causal_edges,
  geonames = NULL,
  failmissing = TRUE,
  ...
)
}
\arguments{
\item{dat}{sf or tibble or dataframe of values to aggregate, with necessary
grouping information for non-theme axis (e.g. scenario, location). \emph{Not}
necessarily the same as \code{data} in \code{\link[=general_aggregate]{general_aggregate()}}- this function makes
necessary adjustments to the data before calling \code{\link[=general_aggregate]{general_aggregate()}}}

\item{from_theme}{character, column name of the theme level the data is
currently in}

\item{to_theme}{character, column name of the theme level to aggregate \emph{to}}

\item{groupers}{as in \code{\link[=general_aggregate]{general_aggregate()}}, with the note that these should
be all grouping columns \emph{except} the theme column specified by \code{to_theme}
and any spatial information. These are both automatically added to
\code{groupers} before passing to \code{\link[=general_aggregate]{general_aggregate()}}.}

\item{aggCols}{an expression for the columns to aggregate (the data columns).
See \code{selectcreator} for formats}

\item{funlist}{a list of functions and their arguments used to aggregate the
data. See \code{functionlister} for creation in many cases. The situation with a
bare anonymous function, e.g. \code{~mean(., na.rm = T)} is not supported
because we need a name. Use a named list if using anonymous functions, e.g.
\code{list(mean = ~mean(., na.rm = T))}. \emph{If using functions with a
data-variable argument}, e.g. weighted.mean with a column of weights, we
now (as of {dplyr} 1.1) have some workarounds. One option is if specified
\emph{as a function argument}, the function can just go in as a bare name or
anonymous. If specified elsewhere, it can be wrapped in \code{\link[rlang:defusing-advanced]{rlang::quo()}},
e.g. \code{agglist <- rlang::quo(list(mean = mean, wm = ~weighted.mean(., weight_column_name, na.rm = T)))}. If it isn't, there is now an internal
workaround to add that on that seems to be stable but may cause unforeseen
issues. This workaround also allows building custom aggregation functions
(not-anonymous) with the data-variable argument either exposed or hardcoded
(see \code{\link[=SpatialWeightedMean]{SpatialWeightedMean()}}). The error checks for names do not work for
quosures, so make sure you name the list if using \code{\link[rlang:defusing-advanced]{rlang::quo()}}.}

\item{causal_edges}{the causal links between theme levels. Needs to include
\code{from_theme} and \code{to_theme}, but can also include others. Creates the theme
grouping}

\item{geonames}{additional columns of information to persist through the
aggregation. Cannot change with the main \code{groupers}. Developed to persist
information about polygons through subsequent theme aggregations, but could
be more general}

\item{failmissing}{logical, default \code{TRUE}: fail if the requested grouping or
aggregation columns not exist. If \code{FALSE}, proceed with those that do exist
and silently drop those that don't. Similar to \code{tidyselect::all_of()} vs
\code{tidyselect::any_of()} in \code{tidyselect}}

\item{...}{}
}
\value{
a dataframe in the same format as read-in (sf or tibble), aggregated
to the \code{to_theme} level and retaining desired geographic information if
included
}
\description{
Aggregation along the theme dimension uses causal mappings to aggregate from
lower to higher levels. This function sets up the data with specific prep for
the way the theme dimension works, and then wraps \code{\link[=general_aggregate]{general_aggregate()}}. Many
of the arguments here are just passed through to general aggregate.
}
