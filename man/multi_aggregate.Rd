% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/multi_aggregate.R
\name{multi_aggregate}
\alias{multi_aggregate}
\title{Iterative aggregation along theme and spatial dimensions}
\usage{
multi_aggregate(
  dat,
  causal_edges,
  groupers = "scenario",
  group_until = rep(NA, length(groupers)),
  aggCols,
  aggsequence,
  funsequence,
  saveintermediate = FALSE,
  namehistory = TRUE,
  keepAllPolys = FALSE,
  failmissing = TRUE,
  auto_ewr_PU = FALSE
)
}
\arguments{
\item{dat}{input dataframe. Must be sf if \code{aggsequence} includes any spatial
aggregation. Otherwise, as in \code{\link[=theme_aggregate]{theme_aggregate()}} and \code{\link[=spatial_aggregate]{spatial_aggregate()}}}

\item{causal_edges}{causal links between all theme levels included in
\code{aggsequence}, though can also include others, which are ignored. Creates
the theme grouping}

\item{groupers}{as in \code{\link[=general_aggregate]{general_aggregate()}}, with the note that these should
be all grouping columns \emph{except} theme and spatial groupings. These are
both automatically added to \code{groupers} according to \code{aggsequence} before
passing to \code{\link[=general_aggregate]{general_aggregate()}}.}

\item{group_until}{named list of groupers and the step to which they should
be retained. Default NA (retain all groupers for all steps). \emph{FOR EWR USE,
best option is} \code{group_until = list('planning_unit_name' = is_notpoint)}.
This groups by planning unit until larger spatial grouping has happened.
Step can be an index, name, or a function that evaluates to TRUE or FALSE
when run on the aggregation sequence. Named list does not need to contain
all groupers, but if so, those that persist throughout should be given NA
or numeric values longer than aggsequence. Vectors the length of groupers
usually work, but are less-well supported.}

\item{aggCols}{an expression for the columns to aggregate (the data columns).
See \code{selectcreator} for formats}

\item{aggsequence}{a named list of aggregation steps in the order to apply
them. Entries for theme aggregation should be character vectors- e.g. \code{name = c('from_theme', 'to_theme')}. Entries for spatial aggregation should be
the sf polygon to aggregate to, e.g. \code{name = sfpolygons} or a length-1
character, e.g. \code{name = "sfpolygons"}. The latter requires the object to be
available with \verb{get("sfpolygons:)}, but allows passing characters rather
than objects. Not requiring names and is high on the list of improvements.
If we want to be able to re-run from auto-saved metadata params, we need
the names of the spatial levels to match the object, e.g. basin: basin.}

\item{funsequence}{a list of aggregation functions to apply in the order to
apply them. Each list entry can be one value, e.g. a character or bare
name, or can be multiple if mulitiple aggregations should be done at that
step, e.g. \code{c('ArithmeticMean', 'LimitingFactor')}. The entries can also be
lists themselves, useful for passing functions with arguments, e.g \code{list(wm = ~weighted.mean(., w = area, na.rm = TRUE))}. \emph{Important:} as of {dplyr}
1.1, if these are anonymous functions that refer to data variables (like
the \code{w = area} argument in the \code{\link[=weighted.mean]{weighted.mean()}} example), that list needs
to be wrapped in \code{\link[rlang:defusing-advanced]{rlang::quo()}}, e.g. \verb{rlang::quo(list(wm = ~weighted.mean(., w = area, na.rm = TRUE))}. And we can no longer mix
character and other forms in the same sub-list (single aggregation step).}

\item{saveintermediate}{logical, default \code{FALSE}. * \code{FALSE} (the default):
Save only the final result as a tibble or sf * \code{TRUE}: Save every step of
the aggregation as a tibble or sf in a list}

\item{namehistory}{logical, default \code{TRUE}.
\itemize{
\item \code{TRUE} (the default): The name of the aggregated column(s) retain the full aggregation history of the form
\code{agglevelN_aggfunctionN_...agglevel1_aggfunction1_originalcolumn}. This is
ugly, but saves memory and says exactly what the values in each column are.
\item \code{FALSE}: The aggregation history is moved out of the column names and
into new columns that define it using \code{\link[=agg_names_to_cols]{agg_names_to_cols()}}. The column
name(s) become(s) the original column name(s) specified by \code{aggCols}. This
is far cleaner and easier for analysis (e.g. filtering on aggregation
functions at a particular step), but increases the size of the dataset and
the meaning of the values in the aggregation column have to be interpreted
with the values in the new columns defining history.
}}

\item{keepAllPolys}{logical, default \code{FALSE}. Should polygons in \code{to_geo}
that have no values in \code{dat} be retained? The default \code{FALSE} keeps NA
polygons from cluttering things up, but \code{TRUE} can be useful to not lose
them, especially for later plotting. However, it is typically best from a
data and cleanliness perspective to use \code{FALSE} here and use the bare set
of polys as an \code{underlay} in \code{\link[=plot_outcomes]{plot_outcomes()}}.}

\item{failmissing}{logical, default \code{TRUE}: fail if the requested grouping or
aggregation columns not exist. If \code{FALSE}, proceed with those that do exist
and silently drop those that don't. Similar to \code{tidyselect::all_of()} vs
\code{tidyselect::any_of()} in \code{tidyselect}}

\item{auto_ewr_PU}{logical, default FALSE. If TRUE, automatically infers
whether this is an EWR dataset and has not yet been spatially aggregated.
If so, applies grouping by 'planning_unit_name'. The preferred solution is
to include it in \code{groupers} here (for on-off), or in \code{\link[=multi_aggregate]{multi_aggregate()}} to
use \code{group_until}. If none of those solutions happen, though, it aborts to
prevent incorrect pooling over planning units.}
}
\value{
either a tibble or sf of aggregated values at the final level (if
\code{saveintermediate = FALSE}) or a list of tibbles or sfs with aggregated
values at each step (\code{saveintermediate = TRUE})
}
\description{
Wraps \code{\link[=spatial_aggregate]{spatial_aggregate()}} and \code{\link[=theme_aggregate]{theme_aggregate()}} within a loop over lists
of aggregation levels and functions to apply at each level. Includes some
small dataprep and cleanup depending on arguments for what the output should
look like
}
