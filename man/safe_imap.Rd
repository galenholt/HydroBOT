% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/safe_imap.R
\name{safe_imap}
\alias{safe_imap}
\title{A wrapper for \code{\link[purrr:imap]{purrr::imap()}} and \code{\link[furrr:future_imap]{furrr::future_imap()}} that bypasses errors and potentially retries them}
\usage{
safe_imap(.x, .f, ..., retries = 0, parallel = FALSE)
}
\arguments{
\item{.x}{object to iterate over, as in \code{\link[purrr:imap]{purrr::imap()}}}

\item{.f}{a function, as in \code{\link[purrr:imap]{purrr::imap()}}}

\item{...}{additional arguments to .f, as in \code{\link[purrr:imap]{purrr::imap()}}}

\item{retries}{Number of times to retry any errors. Default 0 (just try once). Retries only make sense if errors are intermittent for some reason (network connectivity, etc)}

\item{parallel}{Run in parallel with \code{\link[furrr:future_imap]{furrr::future_imap()}} (\code{TRUE}) or sequentially with \code{\link[purrr:imap]{purrr::imap()}} (\code{FALSE}, default)}
}
\value{
A vector the same length as \code{.x}
}
\description{
Uses \code{\link[purrr:safely]{purrr::safely()}} and unpacks the results and errors. Also useful for debugging with a breakpoint
}
\examples{
safe_imap(as.list(1:10) |> setNames(letters[1:10]),
  \(x, y) ifelse(sample(c(1, 2), 1) == 1,
    stop(), paste(x, y)
  ),
  retries = 10
) |>
  unlist()

}
