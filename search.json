[{"path":"https://galenholt.github.io/HydroBOT/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"MIT License","title":"MIT License","text":"Copyright (c) 2023 HydroBOT authors Permission hereby granted, free charge, person obtaining copy software associated documentation files (“Software”), deal Software without restriction, including without limitation rights use, copy, modify, merge, publish, distribute, sublicense, /sell copies Software, permit persons Software furnished , subject following conditions: copyright notice permission notice shall included copies substantial portions Software. SOFTWARE PROVIDED “”, WITHOUT WARRANTY KIND, EXPRESS IMPLIED, INCLUDING LIMITED WARRANTIES MERCHANTABILITY, FITNESS PARTICULAR PURPOSE NONINFRINGEMENT. EVENT SHALL AUTHORS COPYRIGHT HOLDERS LIABLE CLAIM, DAMAGES LIABILITY, WHETHER ACTION CONTRACT, TORT OTHERWISE, ARISING , CONNECTION SOFTWARE USE DEALINGS SOFTWARE.","code":""},{"path":"https://galenholt.github.io/HydroBOT/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Galen Holt. Author, maintainer. Georgia Dwyer. Author.","code":""},{"path":"https://galenholt.github.io/HydroBOT/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Holt G, Dwyer G (2025). HydroBOT: Toolkit Flow-Dependent outcomes Murray-Darling Basin. R package version 0.2.4.9000, https://galenholt.github.io/HydroBOT/.","code":"@Manual{,   title = {HydroBOT: Toolkit For Flow-Dependent outcomes in the Murray-Darling Basin},   author = {Galen Holt and Georgia Dwyer},   year = {2025},   note = {R package version 0.2.4.9000},   url = {https://galenholt.github.io/HydroBOT/}, }"},{"path":[]},{"path":"https://galenholt.github.io/HydroBOT/developer.html","id":"overview","dir":"","previous_headings":"","what":"Overview","title":"Getting Started","text":"self-contained R package, largely following Hadley. Please try retain package structure, setwd()- paths canonical package directory referencing. R package wraps python code interfaces EWR tool. also python used generating test scenarios pull gauges run EWR tool; data-creation, hidden building pkg. data data/ test data, included repo, hopefully change little. can rebuilt notebooks data_creation/, also adds data data-raw/, tracked repo. exception (currently) data gathered elsewhere, move away possible.","code":""},{"path":"https://galenholt.github.io/HydroBOT/developer.html","id":"current-status","dir":"","previous_headings":"","what":"Current status","title":"Getting Started","text":"Adding functionality, making package robust, using demo analyses test improve.","code":""},{"path":"https://galenholt.github.io/HydroBOT/developer.html","id":"gitgithub","dir":"","previous_headings":"","what":"Git/github","title":"Getting Started","text":"Set ssh key able talk github. Largely following Github Andrew’s instructions (Linux Windows). Use RSA key, default ed25519, name . Overriding defaults pain, just use . Basically, setting github ssh key follows github instructions, adding key github account, described github. sets key ~/.ssh. safe, typically cd cd ~/.ssh start, though commands put matter . See detailed notes setting ssh Azure Windows run issues. couple small notes: - Don’t name file- leave default ‘id_TypeOfEncyption’. ssh-add auto adds ’id_*’ files, names. - Don’t include passphrase (just press enter asks one)- just yields another layer signin complexity. - github docs copying public key sometimes swap OSes, clip seems work windows git bash, cat works Linux.","code":""},{"path":"https://galenholt.github.io/HydroBOT/developer.html","id":"git-username","dir":"","previous_headings":"Git/github","what":"Git username","title":"Getting Started","text":"Configure git username email. bash, git config --global user.name \"User Name\" git config --global user.email \"user.email@email\". See github instructions email. Use noreply github email github gets mad push. Deakin computer, probably set config --local ’ve cloned horrible h/ drive HOME. ssh key git user name email, clone repo. IMPORTANT DEV NOTES install branch “HEAD”, use ref = 'branchname'. install_local method, renv version management less reliable.","code":""},{"path":[]},{"path":"https://galenholt.github.io/HydroBOT/developer.html","id":"general-r-setup","dir":"","previous_headings":"R and python environments","what":"General R setup","title":"Getting Started","text":"R versions may match, especially Azure, typically behind. can use rig manage R versions (likely better anyway, can swap around). See notes rig notes. rig installed, , rig list see available R versions (likely none- doesn’t store versions system). rig add 4.3.1 (whatever current version ). ways use Rstudio version renv.lock, likely ways VS, now, easiest make sure renv default matches version renv.lock.","code":""},{"path":"https://galenholt.github.io/HydroBOT/developer.html","id":"r-environments","dir":"","previous_headings":"R and python environments","what":"R environments","title":"Getting Started","text":"starting first time need renv installed. Typically, starting R session Rstudio command line (R) automatically detect absence renv install . , R command prompt type install.packages('renv'). Worth read renv doco. Typically, next run renv::restore() use local renv.lock file build local R environment project. Note .Rprofile present created. new packages added (renv::install('packagename')) want kept, add lockfile renv::snapshot().","code":""},{"path":"https://galenholt.github.io/HydroBOT/developer.html","id":"python-environments","dir":"","previous_headings":"R and python environments","what":"Python environments","title":"Getting Started","text":"Use pyenv manage python versions. Use windows fork Windows!. Use poetry build python environments. Set poetry config virtualenvs.-project true get .venv right place. Use poetry.lock build python environment poetry. needed python packages get auto-installed using package, developers need maintain dev.","code":""},{"path":"https://galenholt.github.io/HydroBOT/developer.html","id":"parallelisation","dir":"","previous_headings":"","what":"Parallelisation","title":"Getting Started","text":"Parallelisation uses {future} package, passess needed functions etc parallelised parts. developing though, passes installed versions, new changes made loaded devtools::load_all(). test parallelisation working, need install package button build pane devtools::install().","code":""},{"path":[]},{"path":[]},{"path":"https://galenholt.github.io/HydroBOT/developer.html","id":"azure","dir":"","previous_headings":"R setup","what":"Azure","title":"Getting Started","text":"R version comes machines 4.0, usual apt-get isn’t finding anything newer. get rig Linux, bash terminal, type curl -Ls https://github.com/r-lib/rig/releases/download/latest/rig-linux-latest.tar.z | sudo tar xz -C /usr/local install rig. Azure boxes, lot missing libs R packages depend . writing, hit errors libcurl, libjq, libgeos, libudunits2, libgdal, libxml2. One option try renv::restore() fix come, likely easier just hit sudo apt-get install libcurl4-openssl-dev libjq-dev libgeos-dev libgdal-dev libudunits2-dev libxml2-dev. Note need install failure R tells needs, can use system(\"sudo apt-get install packagename\") want stay within R switch bash. Azure connection crashes, Explorer panel turns yellow, stop restart Azure VM.","code":""},{"path":"https://galenholt.github.io/HydroBOT/developer.html","id":"r-package-installation","dir":"","previous_headings":"R setup > Azure","what":"R package installation","title":"Getting Started","text":"xml2 causes sorts issues. using renv::restore(), R, run options(install.opts = \"---lock\") renv::install('xml2'). last may necessary (might handled renv::restore()). proceed install everything else. ended install.packages('languageserver') inside repo Azure, won’t talk global .libPaths. takes really long time. ’s necessary using VScode (yes Azure, maybe Windows). yaml package required renv parse lockfile, install.packages('yaml'). Azure, done repo, since .libPaths() repo doesn’t access locations (except base) .libPaths() outside repo. xml2 seems extra touchy install Unix, errors sometimes message pkg-config sometimes permissions move things 00LOCK directory. working smoother fix - currently tried install.packages('xml2', dependencies = TRUE, INSTALL_opts = c('---lock')) inside R, worked took forever seems messed activate.R file.","code":""},{"path":"https://galenholt.github.io/HydroBOT/developer.html","id":"windows","dir":"","previous_headings":"R setup","what":"Windows","title":"Getting Started","text":"Windows, ’ll need Rtools, whichever version matches local R. Rtools provides access compilation C/C++/Fortran. Mac Unix just built-. think ’s command rig add rtools4x rig manage install. Ideally, ’d rig auto-load right version, Rstudio broke functionality. need use rig default 4.v.v opening project. can pain switch ’re using different versions across different projects, work.","code":""},{"path":"https://galenholt.github.io/HydroBOT/developer.html","id":"poetrypython-extras","dir":"","previous_headings":"","what":"Poetry/python extras","title":"Getting Started","text":"poetry installed, cd repo : ensure venv project, set poetry config virtualenvs.-project true poetry config virtualenvs.prefer-active-python true, doesn’t seem work, run poetry env use 3.11 whatever version lock poetry install. create python environment pyproject.toml poetry.lock files, run poetry install. add python packages, use poetry add packagename. , committing tomland lockfiles let others rebuild environment. add specific version, poetry add packagename==1.0.1. sometimes necessary things like py-ewr change frequently. call python R, long venv base project directory, {reticulate} seems find . Otherwise, need tell reticulate::use_virtualenv. ’s detail sort thing developer note {HydroBOT}- , venv outer directory just works. AZURE- first start vscode session, bash bottom use poetry environment, try install use HydroBOT, try auto-build one right dependencies using miniconda (just fail cryptic errors). might work (usually doesn’t). Instead, start new bash terminal, activate venv, open R . point, installing HydroBOT (renv::restore() generally), using code work.","code":""},{"path":"https://galenholt.github.io/HydroBOT/developer.html","id":"ssh-extras","dir":"","previous_headings":"","what":"SSH extras","title":"Getting Started","text":"’re running command line, might use eval \"$(ssh-agent -s)\" ssh-add ~/.ssh/NAME_OF_KEY every time. avoid , change .bashrc according Andrew auto-run ssh-add . tend use nano small edits, nano ~/.bashrc (cd nano .bashrc), copy-paste . (Windows also add ~/.profile) original instructions said needed add .config file ~/.ssh dir following didn’t solve issue persisting named keys doesn’t seem needed default names. ’ve dropped , may want resurrect issues. key still isn’t persisting, ’s likely ssh-add isn’t auto-starting non-default name. best solution use default name, also run ssh-add ~/.ssh/KEY_NAME every time, works. Sometimes VS’s source control pane still doesn’t talk github, command line seems always work .","code":"[ -z \"$SSH_AUTH_SOCK\" ] && eval \"$(ssh-agent -s)\"  env=~/.ssh/agent.env  agent_load_env () { test -f \"$env\" && . \"$env\" >| /dev/null ; }  agent_start () {     (umask 077; ssh-agent >| \"$env\")     . \"$env\" >| /dev/null ; }  agent_load_env  # agent_run_state: 0=agent running w/ key; 1=agent w/o key; 2=agent not running agent_run_state=$(ssh-add -l >| /dev/null 2>&1; echo $?)  if [ ! \"$SSH_AUTH_SOCK\" ] || [ $agent_run_state = 2 ]; then     agent_start     ssh-add elif [ \"$SSH_AUTH_SOCK\" ] && [ $agent_run_state = 1 ]; then     ssh-add fi  unset env AddKeysToAgent yes  Host * IdentityFile  /home/azureuser/.ssh/[your key file name]"},{"path":"https://galenholt.github.io/HydroBOT/developer.html","id":"windows-extras","dir":"","previous_headings":"","what":"Windows extras","title":"Getting Started","text":"’re Deakin computer, HOME set horrible /h drive locked changes. fix (hope), Georgia followed instructions stackoverflow, specifically Start menu, enter env display Environment Variables window. Click environment variables button bottom right. Enter new $HOME variable account: Variable Name: HOME Value: C: Confirm starting bash typing cd ~. Setting ssh Windows easiest use git bash. fine typical repo use, get ssh work installing packages protected repos. prepare , seem inability pass anything rsa keys, create one (one ed25519, ’m pretty sure rsa auto-enforced install_git). rigmarole actually installing github dealt developer.md HydroBOT_website, since ’s need install . Windows connect SSH ’re using system everywhere. seems working go Settings --> Services (really, search Services), --> openSSH authentication --> properties --> startup type Automatic. Run ls-remote git@github.com:MDBAuth/HydroBOT.git command prompt interactively add github known location. create ~/.profile ~/.bashrc bits linux bashrc HydroBOT dev docs, given github instructions auto-launching. profile bashrc seem needed. ’s unclear , since bash, install_git calls cmd. cmd must calling git bash internally. , also need install git2r package, install_git still fail, pass credentials argument, even though seems like .","code":""},{"path":"https://galenholt.github.io/HydroBOT/developer.html","id":"r-in-vscode","dir":"","previous_headings":"","what":"R in VScode","title":"Getting Started","text":"R environment stuff within project managed renv, packages want install globally make R work VScode, help development, etc. , outside repo (cloning ), things. use R VScode, things , mostly listed VScode docs. essential ones install languageserver (install.packages('languageserver')) R extension VScode. However, sometimes install inside repo. think .libPaths doesn’t retain global paths Azure retains elsewhere. VScode prompt install can’t find . ’m experimenting radian httpgd, think like , ’re necessary. linters, debuggers, etc beyond comes VScode R extension, haven’t played yet. want install radian terminal, global well. azure boxes need pip3 install prompt-toolkit --upgrade pip3 install -U radian get TypeErrors. Hoping doesn’t screw python envs? Guess ’ll see. start radian terminal, says ‘python’, ‘R’ radian written python. bit confusing, especially ’re also actually python work. practice, like things radian, turned throws weird errors (runs ) aren’t real (‘unexpected & }’ neither symbol code). just don’t fully trust . think issue doesn’t handle running code chunks Quarto correctly- ’s effectively copy-pasting terminal isn’t right. finally got radian working, uninstall base python install poetry venv. set Rterm path R extension settings. Linux, radian get location, put (/anaconda/envs/azureml_py38/bin/radian) Rterm:Linux settings. Windows, radian pointed shims, installing radian repo poetry using C:\\\\path\\\\\\\\repo\\\\.venv\\\\Scripts\\\\radian.exe Rterm windows. Also settings, set Always Use Active Terminal Use Bracked Paste settings. USE BRACKETED PASTE SWITCH BACK VANILLA R TERMINAL. active terminal deal try auto-start radian notebook, barfs python env. start radian bash/powershell, gets python env right can go. , dropped doesn’t fully support UTF-8, UTF-8 characters data- e.g. “Macquarie–Castlereagh” En-Dash gets dropped silently everything breaks. ’s sorted, ’s just worth . ’s also slower base R, though highlighting code completion really nice, introduced bugs terrible. reason doesn’t work httpgd. Installing httpgd globally well (inside R, install.packages('httpgd')). settings, also turned LSP:debug clicked use httpgd plots settings. ’ll try keep record setup things ’ve done don’t forget different VS behaviour. VS seems sometimes struggle find library started HydroBOT. case, start new workspace HydroBOT/HydroBOT. VS opened HydroBOT HydroBOT needs told first time open workspace python interpreter (/werptoolkitpy/.venv/Scripts/python.exe) ’s longer top-level.","code":""},{"path":"https://galenholt.github.io/HydroBOT/developer.html","id":"notes-on-using-mdba-systems","dir":"","previous_headings":"","what":"Notes on using MDBA systems","title":"Getting Started","text":"get compute machines, open Azure Machine Learning studio. Get Azure portal, Resources (green grid), MDBA-NPD-ML-AUE, ‘Launch’ (button middle main panel, side bar), Compute (bottom left column) Start computer Click VS code- start main VScode Remote Desktop, connected Azure box. may signin needed, connection step first time. think ’s working says Azure ML top vs code window (bottom left) Now, opens CODE[AZURE ML… explorer Users/User.Name work terminal bottom also opens CODE sometimes, rather directory- careful moving files. git clone doesn’t work, ’s likely named ssh key. Either make default key ssh-add ~/.ssh/KEY_NAME. top level workspace repo much nicer Users directory. Seems work click Open Folder link middle, toolbar popup navigage repo. git checkout branch want, setting environments.","code":""},{"path":"https://galenholt.github.io/HydroBOT/developer.html","id":"installing-the-package","dir":"","previous_headings":"","what":"Installing the package","title":"Getting Started","text":"able install development version HydroBOT GitHub devtools::install_git. devtools::install_git() work SSH, two methods, depending R version. easiest R < 4.3, case install {git2r} package, SSH keys set , work: using R 4.3, {git2r} package support ssh, use external (system) git. ’s uglier, robust, Readme. R uses different Home directory standard (typically ~/Documents), work, need set SSH keys location well (e.g. ~/Documents/.ssh/) connect github. else fails, clone repo locally, install .","code":"# install.packages(\"devtools\", \"git2r\") devtools::install_git(\"git@github.com:MDBAuth/HydroBOT.git\", ref = 'master', force = TRUE, upgrade = 'ask') `devtools::install_local('path/to/repo', force = TRUE, upgrade = 'ask')`"},{"path":"https://galenholt.github.io/HydroBOT/index.html","id":"hydrobot","dir":"","previous_headings":"","what":"Toolkit For Flow-Dependent outcomes in the Murray-Darling Basin","title":"Toolkit For Flow-Dependent outcomes in the Murray-Darling Basin","text":"R package (HydroBOT) forms core climate adaptation toolkit developed climate adaptation theme Murray–Darling Water Environment Research Program. HydroBOT ingests hydrological scenarios representing historical future climates adaptation options, processing various response models (currently MDBA EWR tool, intention include tools future). Subsequent processing outcomes along spatial, theme, temporal axes available, well control outputs comparisons scenarios. Causal networks defining relationships response models included, though general current versions obtained EWR tool directly get_causal_ewr(). See documentation website installation instructions examples. template repo can helpful establishing project structure use HydroBOT automating setup process, particularly Linux want manage python environments.","code":""},{"path":"https://galenholt.github.io/HydroBOT/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Toolkit For Flow-Dependent outcomes in the Murray-Darling Basin","text":"Install development version HydroBOT GitHub favorite installer","code":"# install.packages(\"devtools\") devtools::install_github(\"galenholt/HydroBOT.git\") library(HydroBOT) #> Loading required package: sf #> Linking to GEOS 3.13.0, GDAL 3.10.1, PROJ 9.5.1; sf_use_s2() is TRUE"},{"path":"https://galenholt.github.io/HydroBOT/index.html","id":"python-dependency","dir":"","previous_headings":"Installation","what":"Python dependency","title":"Toolkit For Flow-Dependent outcomes in the Murray-Darling Basin","text":"run current built EWR module, HydroBOT needs Python environment containing py_ewr (currently 2.3.7). package manage just start using - first use, package checks environment either uses existing python environment builds one dependency package loaded. poetry.lock pyproject.toml files repo allow dev work building venv manually control python desired.","code":""},{"path":"https://galenholt.github.io/HydroBOT/index.html","id":"use","dir":"","previous_headings":"","what":"Use","title":"Toolkit For Flow-Dependent outcomes in the Murray-Darling Basin","text":"HydroBOT can run piecemeal , scripted. Point directory hydrologic scenarios, HydroBOT run modules, aggregate outputs, present results, control user function arguments. stage builds runnable set parameter metadata based function arguments tracking provenance reproducibility. Typical approaches use R scripts, Quarto notebooks, automation HPC azure systems yaml parameter files shell/R scripts. See HydroBOT documentation website full demonstration template repo bare-bones project structure. Using HydroBOT typically three-step process: Running hydrographs EWR tool (future modules) prep_run_save_ewrs(). Best practice hydrographs directories defined scenarios, hydrographs within scenario can run , parallelised scenarios. Aggregating module outputs larger theme, spatial, temporal scales read_and_agg() read_and_agg() maintains dimensional safety theme, temporal, spatial dimensions, avoiding collapse unintended dimensions quite easy miss manually using e.g. dplyr::summarise(). read_and_agg() (wrapped functions dimensional aggregation) provide ability retain groupings non-spatial joins spatial data. allows EWR-aware, provide warnings automation best-practice automation EWR aggregation collapse planning sdl units soon join gauges non-spatially. easiest way use auto_ewr_PU = TRUE . expected read_and_agg() may run several times given analysis, several different aggregation sequences, different sets may needed different questions, iterative production results identifies better approaches. Developing output products targeting question interest (typically scenario comparison) plot_outcomes() baseline_compare() plot_outcomes() provides consistent processing analysis input output data, compared manually building ggplots plot_outcomes() theme, space, time-aware, prevents accidental overplotting losses dimensional data. return plot_outcomes() ggplot object, can tweaked usual.","code":""},{"path":"https://galenholt.github.io/HydroBOT/index.html","id":"example-run","dir":"","previous_headings":"","what":"Example run","title":"Toolkit For Flow-Dependent outcomes in the Murray-Darling Basin","text":"simple run HydroBOT provided example data works follows. See documentation website much detail. real run think carefully aggregation plotting decisions. much detail setting runs, see documentation. path hydrographs Run EWR tool return output memory, rather saving small example. See documentation details Set aggregation steps, see documentation detail. multi-dimensional aggregation, just returning memory. couple figures check worked, see documentation detail.","code":"hydro_dir <- system.file(\"extdata/testsmall/hydrographs\", package = \"HydroBOT\") ewr_out <- prep_run_save_ewrs(   hydro_dir = hydro_dir,   output_parent_dir = tempdir(),   outputType = list(\"none\"),   returnType = list(\"yearly\") ) aggseq <- list(   all_time = \"all_time\",   ewr_code = c(\"ewr_code_timing\", \"ewr_code\"),   env_obj = c(\"ewr_code\", \"env_obj\"),   sdl_units = sdl_units,   Target = c(\"env_obj\", \"Target\"),   mdb = basin,   target_5_year_2024 = c(\"Target\", \"target_5_year_2024\") )  funseq <- list(   all_time = \"ArithmeticMean\",   ewr_code = \"CompensatingFactor\",   env_obj = \"ArithmeticMean\",   sdl_units = \"ArithmeticMean\",   Target = \"ArithmeticMean\",   mdb = \"SpatialWeightedMean\",   target_5_year_2024 = \"ArithmeticMean\" ) aggout <- read_and_agg(   datpath = ewr_out,   type = \"achievement\",   geopath = bom_basin_gauges,   causalpath = causal_ewr,   groupers = \"scenario\",   aggCols = \"ewr_achieved\",   auto_ewr_PU = TRUE,   aggsequence = aggseq,   funsequence = funseq,   saveintermediate = TRUE,   namehistory = FALSE,   keepAllPolys = FALSE,   returnList = TRUE,   add_max = FALSE ) map_example <- aggout$Target |>   # dplyr::filter(env_obj == \"NF1\") |> # Need to reduce dimensionality   plot_outcomes(     outcome_col = \"ewr_achieved\",     plot_type = \"map\",     colorset = \"ewr_achieved\",     pal_list = list(\"scico::lapaz\"),     pal_direction = -1,     facet_col = \"Target\",     facet_row = \"scenario\",     sceneorder = c(\"down4\", \"base\", \"up4\"),     underlay_list = \"basin\"   ) +   ggplot2::theme(legend.position = \"bottom\")  map_example catchcompare <- aggout$env_obj |>   plot_outcomes(     outcome_col = \"ewr_achieved\",     colorset = \"SWSDLName\",     pal_list = list(\"calecopal::lake\"),     sceneorder = c(\"down4\", \"base\", \"up4\"),     position = \"dodge\"   )  catchcompare"},{"path":"https://galenholt.github.io/HydroBOT/index.html","id":"development","dir":"","previous_headings":"","what":"Development","title":"Toolkit For Flow-Dependent outcomes in the Murray-Darling Basin","text":"See developer page","code":""},{"path":"https://galenholt.github.io/HydroBOT/index.html","id":"further-examples","dir":"","previous_headings":"","what":"Further examples","title":"Toolkit For Flow-Dependent outcomes in the Murray-Darling Basin","text":"See HydroBOT website full demonstration.","code":""},{"path":"https://galenholt.github.io/HydroBOT/index.html","id":"who-do-i-talk-to","dir":"","previous_headings":"","what":"Who do I talk to?","title":"Toolkit For Flow-Dependent outcomes in the Murray-Darling Basin","text":"Galen Holt, g.holt@deakin.edu.au","code":""},{"path":"https://galenholt.github.io/HydroBOT/index.html","id":"acknowledgements","dir":"","previous_headings":"","what":"Acknowledgements","title":"Toolkit For Flow-Dependent outcomes in the Murray-Darling Basin","text":"HydroBOT developed climate adaptation theme Murray–Darling Water Environment Research Program, program Murray-Darling Basin Authority. Collaboration colleagues Deakin University, CSIRO, MDBA essential development success.","code":""},{"path":"https://galenholt.github.io/HydroBOT/reference/ArithmeticMean.html","id":null,"dir":"Reference","previous_headings":"","what":"Arithmetic mean aggregation — ArithmeticMean","title":"Arithmetic mean aggregation — ArithmeticMean","text":"Finds arithmetic mean values. Lightweight wrapper mean na.rm = TRUE match functions.","code":""},{"path":"https://galenholt.github.io/HydroBOT/reference/ArithmeticMean.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Arithmetic mean aggregation — ArithmeticMean","text":"","code":"ArithmeticMean(x, na.rm = TRUE)"},{"path":"https://galenholt.github.io/HydroBOT/reference/ArithmeticMean.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Arithmetic mean aggregation — ArithmeticMean","text":"x values aggregate na.rm default na.rm = TRUE finds aggregation ignoring NA, opposite usual na.rm default na.rm = FALSE, returns NA NA.","code":""},{"path":"https://galenholt.github.io/HydroBOT/reference/ArithmeticMean.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Arithmetic mean aggregation — ArithmeticMean","text":"summarised data","code":""},{"path":"https://galenholt.github.io/HydroBOT/reference/CompensatingFactor.html","id":null,"dir":"Reference","previous_headings":"","what":"Compensating aggregation — CompensatingFactor","title":"Compensating aggregation — CompensatingFactor","text":"well one time/place can compensate poorly elsewhere. Implemented max(). binary, means passing means passing aggregated value.","code":""},{"path":"https://galenholt.github.io/HydroBOT/reference/CompensatingFactor.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Compensating aggregation — CompensatingFactor","text":"","code":"CompensatingFactor(x, na.rm = TRUE)"},{"path":"https://galenholt.github.io/HydroBOT/reference/CompensatingFactor.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Compensating aggregation — CompensatingFactor","text":"x values aggregate na.rm default na.rm = TRUE finds aggregation ignoring NA, opposite usual na.rm default na.rm = FALSE, returns NA NA.","code":""},{"path":"https://galenholt.github.io/HydroBOT/reference/CompensatingFactor.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Compensating aggregation — CompensatingFactor","text":"summarised data","code":""},{"path":"https://galenholt.github.io/HydroBOT/reference/GeometricMean.html","id":null,"dir":"Reference","previous_headings":"","what":"Geometric mean aggregation — GeometricMean","title":"Geometric mean aggregation — GeometricMean","text":"Finds geometric mean values.","code":""},{"path":"https://galenholt.github.io/HydroBOT/reference/GeometricMean.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Geometric mean aggregation — GeometricMean","text":"","code":"GeometricMean(x, na.rm = TRUE)"},{"path":"https://galenholt.github.io/HydroBOT/reference/GeometricMean.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Geometric mean aggregation — GeometricMean","text":"x values aggregate na.rm default na.rm = TRUE finds aggregation ignoring NA, opposite usual na.rm default na.rm = FALSE, returns NA NA.","code":""},{"path":"https://galenholt.github.io/HydroBOT/reference/GeometricMean.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Geometric mean aggregation — GeometricMean","text":"summarised data","code":""},{"path":"https://galenholt.github.io/HydroBOT/reference/HarmonicMean.html","id":null,"dir":"Reference","previous_headings":"","what":"Harmonic mean aggregation — HarmonicMean","title":"Harmonic mean aggregation — HarmonicMean","text":"Finds harmonic mean values","code":""},{"path":"https://galenholt.github.io/HydroBOT/reference/HarmonicMean.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Harmonic mean aggregation — HarmonicMean","text":"","code":"HarmonicMean(x, na.rm = TRUE)"},{"path":"https://galenholt.github.io/HydroBOT/reference/HarmonicMean.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Harmonic mean aggregation — HarmonicMean","text":"x values aggregate na.rm default na.rm = TRUE finds aggregation ignoring NA, opposite usual na.rm default na.rm = FALSE, returns NA NA.","code":""},{"path":"https://galenholt.github.io/HydroBOT/reference/HarmonicMean.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Harmonic mean aggregation — HarmonicMean","text":"summarised data","code":""},{"path":"https://galenholt.github.io/HydroBOT/reference/HydroBOT-package.html","id":null,"dir":"Reference","previous_headings":"","what":"HydroBOT: Toolkit For Flow-Dependent outcomes in the Murray-Darling Basin — HydroBOT-package","title":"HydroBOT: Toolkit For Flow-Dependent outcomes in the Murray-Darling Basin — HydroBOT-package","text":"Provides tools assess responses flows MDB. Wraps EWR tool provides ongoing modeling ecological responses causal networks, well analysis, synthesis visualisation functionality targetted scenario comparisons.","code":""},{"path":[]},{"path":"https://galenholt.github.io/HydroBOT/reference/HydroBOT-package.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"HydroBOT: Toolkit For Flow-Dependent outcomes in the Murray-Darling Basin — HydroBOT-package","text":"Maintainer: Galen Holt g.holt@deakin.edu.au (ORCID) Authors: Georgia Dwyer g.dwyer@deakin.edu.au","code":""},{"path":"https://galenholt.github.io/HydroBOT/reference/LimitingFactor.html","id":null,"dir":"Reference","previous_headings":"","what":"Limiting aggregation — LimitingFactor","title":"Limiting aggregation — LimitingFactor","text":"poorly one time/place negates benefits elsewhere. Implemented min(). binary, means failing anywhere means failing everywhere.","code":""},{"path":"https://galenholt.github.io/HydroBOT/reference/LimitingFactor.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Limiting aggregation — LimitingFactor","text":"","code":"LimitingFactor(x, na.rm = TRUE)"},{"path":"https://galenholt.github.io/HydroBOT/reference/LimitingFactor.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Limiting aggregation — LimitingFactor","text":"x values aggregate na.rm default na.rm = TRUE finds aggregation ignoring NA, opposite usual na.rm default na.rm = FALSE, returns NA NA.","code":""},{"path":"https://galenholt.github.io/HydroBOT/reference/LimitingFactor.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Limiting aggregation — LimitingFactor","text":"summarised data","code":""},{"path":"https://galenholt.github.io/HydroBOT/reference/Max.html","id":null,"dir":"Reference","previous_headings":"","what":"Max aggregation with na.rm = TRUE by default except that all-NA vectors still return NA, not 0. — Max","title":"Max aggregation with na.rm = TRUE by default except that all-NA vectors still return NA, not 0. — Max","text":"Max aggregation na.rm = TRUE default except -NA vectors still return NA, 0.","code":""},{"path":"https://galenholt.github.io/HydroBOT/reference/Max.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Max aggregation with na.rm = TRUE by default except that all-NA vectors still return NA, not 0. — Max","text":"","code":"Max(x, na.rm = TRUE)"},{"path":"https://galenholt.github.io/HydroBOT/reference/Max.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Max aggregation with na.rm = TRUE by default except that all-NA vectors still return NA, not 0. — Max","text":"x values aggregate na.rm default na.rm = TRUE finds aggregation ignoring NA, opposite usual na.rm default na.rm = FALSE, returns NA NA.","code":""},{"path":"https://galenholt.github.io/HydroBOT/reference/Max.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Max aggregation with na.rm = TRUE by default except that all-NA vectors still return NA, not 0. — Max","text":"numeric","code":""},{"path":"https://galenholt.github.io/HydroBOT/reference/Median.html","id":null,"dir":"Reference","previous_headings":"","what":"Median — Median","title":"Median — Median","text":"Finds median values. Lightweight wrapper medain na.rm = TRUE match functions.","code":""},{"path":"https://galenholt.github.io/HydroBOT/reference/Median.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Median — Median","text":"","code":"Median(x, na.rm = TRUE)"},{"path":"https://galenholt.github.io/HydroBOT/reference/Median.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Median — Median","text":"x values aggregate na.rm default na.rm = TRUE finds aggregation ignoring NA, opposite usual na.rm default na.rm = FALSE, returns NA NA.","code":""},{"path":"https://galenholt.github.io/HydroBOT/reference/Median.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Median — Median","text":"summarised data","code":""},{"path":"https://galenholt.github.io/HydroBOT/reference/Min.html","id":null,"dir":"Reference","previous_headings":"","what":"Min aggregation with na.rm = TRUE by default except that all-NA vectors still return NA, not 0. — Min","title":"Min aggregation with na.rm = TRUE by default except that all-NA vectors still return NA, not 0. — Min","text":"Min aggregation na.rm = TRUE default except -NA vectors still return NA, 0.","code":""},{"path":"https://galenholt.github.io/HydroBOT/reference/Min.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Min aggregation with na.rm = TRUE by default except that all-NA vectors still return NA, not 0. — Min","text":"","code":"Min(x, na.rm = TRUE)"},{"path":"https://galenholt.github.io/HydroBOT/reference/Min.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Min aggregation with na.rm = TRUE by default except that all-NA vectors still return NA, not 0. — Min","text":"x values aggregate na.rm default na.rm = TRUE finds aggregation ignoring NA, opposite usual na.rm default na.rm = FALSE, returns NA NA.","code":""},{"path":"https://galenholt.github.io/HydroBOT/reference/Min.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Min aggregation with na.rm = TRUE by default except that all-NA vectors still return NA, not 0. — Min","text":"numeric","code":""},{"path":"https://galenholt.github.io/HydroBOT/reference/NumberOfValues.html","id":null,"dir":"Reference","previous_headings":"","what":"Find number of items being aggregated — NumberOfValues","title":"Find number of items being aggregated — NumberOfValues","text":"Finds number values. Lightweight wrapper length removal NA values match functions.","code":""},{"path":"https://galenholt.github.io/HydroBOT/reference/NumberOfValues.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Find number of items being aggregated — NumberOfValues","text":"","code":"NumberOfValues(x, na.rm = TRUE)"},{"path":"https://galenholt.github.io/HydroBOT/reference/NumberOfValues.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Find number of items being aggregated — NumberOfValues","text":"x values aggregate na.rm default na.rm = TRUE finds aggregation ignoring NA, opposite usual na.rm default na.rm = FALSE, returns NA NA.","code":""},{"path":"https://galenholt.github.io/HydroBOT/reference/NumberOfValues.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Find number of items being aggregated — NumberOfValues","text":"summarised data","code":""},{"path":"https://galenholt.github.io/HydroBOT/reference/SpatialWeightedMean.html","id":null,"dir":"Reference","previous_headings":"","what":"Weighted mean by area column — SpatialWeightedMean","title":"Weighted mean by area column — SpatialWeightedMean","text":"Finds arithmetic mean weighted area column, auto-created spatial datasets.","code":""},{"path":"https://galenholt.github.io/HydroBOT/reference/SpatialWeightedMean.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Weighted mean by area column — SpatialWeightedMean","text":"","code":"SpatialWeightedMean(x, na.rm = TRUE)"},{"path":"https://galenholt.github.io/HydroBOT/reference/SpatialWeightedMean.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Weighted mean by area column — SpatialWeightedMean","text":"x values aggregate na.rm default na.rm = TRUE finds aggregation ignoring NA, opposite usual na.rm default na.rm = FALSE, returns NA NA.","code":""},{"path":"https://galenholt.github.io/HydroBOT/reference/SpatialWeightedMean.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Weighted mean by area column — SpatialWeightedMean","text":"summarised data","code":""},{"path":"https://galenholt.github.io/HydroBOT/reference/Sum.html","id":null,"dir":"Reference","previous_headings":"","what":"Sum aggregation — Sum","title":"Sum aggregation — Sum","text":"Finds sum values. Lightweight wrapper sum na.rm = TRUE match functions.","code":""},{"path":"https://galenholt.github.io/HydroBOT/reference/Sum.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Sum aggregation — Sum","text":"","code":"Sum(x, na.rm = TRUE)"},{"path":"https://galenholt.github.io/HydroBOT/reference/Sum.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Sum aggregation — Sum","text":"x values aggregate na.rm default na.rm = TRUE finds aggregation ignoring NA, opposite usual na.rm default na.rm = FALSE, returns NA NA.","code":""},{"path":"https://galenholt.github.io/HydroBOT/reference/Sum.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Sum aggregation — Sum","text":"summarised data","code":""},{"path":"https://galenholt.github.io/HydroBOT/reference/Variance.html","id":null,"dir":"Reference","previous_headings":"","what":"Variance aggregation — Variance","title":"Variance aggregation — Variance","text":"Finds variance values. Lightweight wrapper var na.rm = TRUE match functions.","code":""},{"path":"https://galenholt.github.io/HydroBOT/reference/Variance.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Variance aggregation — Variance","text":"","code":"Variance(x, na.rm = TRUE)"},{"path":"https://galenholt.github.io/HydroBOT/reference/Variance.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Variance aggregation — Variance","text":"x values aggregate na.rm default na.rm = TRUE finds aggregation ignoring NA, opposite usual na.rm default na.rm = FALSE, returns NA NA.","code":""},{"path":"https://galenholt.github.io/HydroBOT/reference/Variance.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Variance aggregation — Variance","text":"summarised data","code":""},{"path":"https://galenholt.github.io/HydroBOT/reference/adjust_zeros.html","id":null,"dir":"Reference","previous_headings":"","what":"Adjust zeros to make relativizing, logging, etc smoother — adjust_zeros","title":"Adjust zeros to make relativizing, logging, etc smoother — adjust_zeros","text":"Adjust zeros make relativizing, logging, etc smoother","code":""},{"path":"https://galenholt.github.io/HydroBOT/reference/adjust_zeros.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Adjust zeros to make relativizing, logging, etc smoother — adjust_zeros","text":"","code":"adjust_zeros(data, adjust_col, amount, onlyzeros = FALSE)"},{"path":"https://galenholt.github.io/HydroBOT/reference/adjust_zeros.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Adjust zeros to make relativizing, logging, etc smoother — adjust_zeros","text":"data dataframe adjust_col column adjust (numeric) amount much adjust, default 0. Either numeric 'auto'. Auto shifts 0.1*min(abs(data[data != 0])). nonzero data positive negative, zeros shifted . Otherwise, shifted randomly abs(amount) onlyzeros logical, default FALSE. Shift data zeros (TRUE). Nonzero data shifted away 0 whatever direction already FALSE","code":""},{"path":"https://galenholt.github.io/HydroBOT/reference/adjust_zeros.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Adjust zeros to make relativizing, logging, etc smoother — adjust_zeros","text":"dataframe zeros adjust_col","code":""},{"path":"https://galenholt.github.io/HydroBOT/reference/agg_names_to_cols.html","id":null,"dir":"Reference","previous_headings":"","what":"Change aggregation history in col names to stepwise columns — agg_names_to_cols","title":"Change aggregation history in col names to stepwise columns — agg_names_to_cols","text":"default, aggregation history (function level) tracked column names memory purposes keep units clear. usually useful able access information, parses names aggregated columns columns aggregation function aggregation level.","code":""},{"path":"https://galenholt.github.io/HydroBOT/reference/agg_names_to_cols.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Change aggregation history in col names to stepwise columns — agg_names_to_cols","text":"","code":"agg_names_to_cols(aggdf, aggsequence, funsequence, aggCols)"},{"path":"https://galenholt.github.io/HydroBOT/reference/agg_names_to_cols.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Change aggregation history in col names to stepwise columns — agg_names_to_cols","text":"aggdf aggregated dataframe tibble aggsequence list names aggregation. works best list passed calling function named, names passed .Typically second value theme aggregation step (-theme), name spatial polygons. extracting unnamed well tested. funsequence list functions (characters lists names arguments) apply aggregation step defined aggsequence. Can multiple funs per aggregation step. aggCols name(s) original columns aggregated.","code":""},{"path":"https://galenholt.github.io/HydroBOT/reference/agg_names_to_cols.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Change aggregation history in col names to stepwise columns — agg_names_to_cols","text":"tibble column named original input data start aggregation, columns every aggregation step giving level aggregated function used aggregation. multiple functions used, rows stacked (long format).","code":""},{"path":"https://galenholt.github.io/HydroBOT/reference/as_colors.html","id":null,"dir":"Reference","previous_headings":"","what":"Make a vector of colors have class 'colors' — as_colors","title":"Make a vector of colors have class 'colors' — as_colors","text":"must exist somewhere, packages make things class 'colors', c() breaks.","code":""},{"path":"https://galenholt.github.io/HydroBOT/reference/as_colors.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Make a vector of colors have class 'colors' — as_colors","text":"","code":"as_colors(colvec)"},{"path":"https://galenholt.github.io/HydroBOT/reference/as_colors.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Make a vector of colors have class 'colors' — as_colors","text":"colvec character vector colors","code":""},{"path":"https://galenholt.github.io/HydroBOT/reference/as_colors.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Make a vector of colors have class 'colors' — as_colors","text":"object class colors","code":""},{"path":"https://galenholt.github.io/HydroBOT/reference/assess_ewr_achievement.html","id":null,"dir":"Reference","previous_headings":"","what":"EWR logic test on incoming Annual EWRs — assess_ewr_achievement","title":"EWR logic test on incoming Annual EWRs — assess_ewr_achievement","text":"pass/fail test whether criteria (frequency timing) EWRs met Using Minimum long term average (LTA) target frequencies (Termed Target frequency summarydf) suggested LTWPs Includes inverse result cease flows (CF) assessment event_years ","code":""},{"path":"https://galenholt.github.io/HydroBOT/reference/assess_ewr_achievement.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"EWR logic test on incoming Annual EWRs — assess_ewr_achievement","text":"","code":"assess_ewr_achievement(   annualdf,   year_roll = ifelse(nrow(annualdf) >= 10, 10, 1) )"},{"path":"https://galenholt.github.io/HydroBOT/reference/assess_ewr_achievement.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"EWR logic test on incoming Annual EWRs — assess_ewr_achievement","text":"annualdf incoming tibble EWRs read-year_roll specific number years check assessment ","code":""},{"path":"https://galenholt.github.io/HydroBOT/reference/assess_ewr_achievement.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"EWR logic test on incoming Annual EWRs — assess_ewr_achievement","text":"tibble columns scenario, year, date, gauge, planning_unit_name, state, SWSDLName, ewr_code, ewr_code_timing, event_years, frequency_achieved, interevent_achieved, ewr_achieved","code":""},{"path":"https://galenholt.github.io/HydroBOT/reference/assess_ewr_interevents.html","id":null,"dir":"Reference","previous_headings":"","what":"Some calculations needed for aggregation of interevent statistics — assess_ewr_interevents","title":"Some calculations needed for aggregation of interevent statistics — assess_ewr_interevents","text":"calculations needed aggregation interevent statistics","code":""},{"path":"https://galenholt.github.io/HydroBOT/reference/assess_ewr_interevents.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Some calculations needed for aggregation of interevent statistics — assess_ewr_interevents","text":"","code":"assess_ewr_interevents(interdf)"},{"path":"https://galenholt.github.io/HydroBOT/reference/assess_ewr_interevents.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Some calculations needed for aggregation of interevent statistics — assess_ewr_interevents","text":"interdf all_interEvents all_successful_interEvents EWR output","code":""},{"path":"https://galenholt.github.io/HydroBOT/reference/assess_ewr_interevents.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Some calculations needed for aggregation of interevent statistics — assess_ewr_interevents","text":"tibble columns scenario, gauge, planning_unit_name, state, SWSDLName, ewr_code, start_date, inter_event_length, ewr_code_timing, max_interevent, exceedance_days (realised - max), interevent_ratio (realised / max), exceedance_ratio (interevent_ratio - 1), exceedance (binary; realised >= max), exceedance_only (days max), days_in_exceeding (realised max passed)","code":""},{"path":"https://galenholt.github.io/HydroBOT/reference/baseline_compare.html","id":null,"dir":"Reference","previous_headings":"","what":"Compare values to a baseline — baseline_compare","title":"Compare values to a baseline — baseline_compare","text":"used automate comparison baselines various sorts without needing data wrangling hand.","code":""},{"path":"https://galenholt.github.io/HydroBOT/reference/baseline_compare.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Compare values to a baseline — baseline_compare","text":"","code":"baseline_compare(   val_df,   compare_col,   base_lev,   values_col,   group_cols = NULL,   comp_fun,   ...,   failmissing = TRUE,   names_to = \"name\",   values_to = \"value\",   zero_adjust = 0,   onlyzeros = FALSE )"},{"path":"https://galenholt.github.io/HydroBOT/reference/baseline_compare.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Compare values to a baseline — baseline_compare","text":"val_df dataframe values compare_col column columns use grouping- needed baseline one level column. Otherwise ignored base_lev value baseline. Can level compare_col, scalar, vector length(unique(val_df$compare_col)). dataframe useful yet implemented. values_col column containing values. Can character tidyselect bare names, though last fragile. group_cols character, columns group baselining . Often spatial env_obj similar. comp_fun function use comparison comparing first two arguments (difference relative included wrappers - /). Can character, list-format, (safe) bare name (brittle) ... additional arguments comp_fun failmissing logical, default TRUE. Use tidyselect::any_of tidyselect::all_of values_col compare_col character. see selectcreator() names_to character, tidyr::pivot_longer(), used auto-pivotting values_to character, tidyr::pivot_longer(), used auto-pivotting zero_adjust numeric (default 0) \"auto\", adjustment data avoid zeros adding zero_adjust abs(data), e.g shifting data away zero, either positively negatively. Zeros shifted randomly. Used avoiding x/0, NaN, Inf relativiszing taking logs, primarily. Auto shifts 0.1*min(abs(data[data != 0])). onlyzeros logical, default FALSE. values adjusted away zero (TRUE) adjust zero values (FALSE)?","code":""},{"path":"https://galenholt.github.io/HydroBOT/reference/baseline_compare.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Compare values to a baseline — baseline_compare","text":"tibble matching val_df (long version thereof val_df wide), added column reference level (named ref_values_col) column compared values (named comp_fun_values_col)","code":""},{"path":"https://galenholt.github.io/HydroBOT/reference/basin.html","id":null,"dir":"Reference","previous_headings":"","what":"Murray-Darling Basin Polygon — basin","title":"Murray-Darling Basin Polygon — basin","text":"Polygon defining Murray-Darling Basin boundary. Sourced MDBA data website, direct link given .","code":""},{"path":"https://galenholt.github.io/HydroBOT/reference/basin.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Murray-Darling Basin Polygon — basin","text":"","code":"basin"},{"path":[]},{"path":"https://galenholt.github.io/HydroBOT/reference/basin.html","id":"basin-an-sf-object-with-one-polygon-","dir":"Reference","previous_headings":"","what":"basin An sf object with one polygon:","title":"Murray-Darling Basin Polygon — basin","text":"DDIV_NAME Polygon name AREA_HA, SHAPE_AREA, SHAPE_LEN basic descriptions","code":""},{"path":"https://galenholt.github.io/HydroBOT/reference/basin.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"Murray-Darling Basin Polygon — basin","text":"https://data.gov.au/data/dataset/4ede9aed-5620-47db-a72b-0b3aa0a3ced0/resource/8a6d889d-723b-492d-8c12-b8b0d1ba4b5a/download/sworkingadhocjobsj4430dataoutputsmdb_boundarymdb_boundary.zip","code":""},{"path":"https://galenholt.github.io/HydroBOT/reference/basin_rivers.html","id":null,"dir":"Reference","previous_headings":"","what":"River lines in the basin — basin_rivers","title":"River lines in the basin — basin_rivers","text":"Spatial lines major rivers basin, HydroRIVERS. clipped basin paths simplified.","code":""},{"path":"https://galenholt.github.io/HydroBOT/reference/basin_rivers.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"River lines in the basin — basin_rivers","text":"","code":"basin_rivers"},{"path":[]},{"path":"https://galenholt.github.io/HydroBOT/reference/basin_rivers.html","id":"basin-rivers-an-sf-object-","dir":"Reference","previous_headings":"","what":"basin_rivers An sf object:","title":"River lines in the basin — basin_rivers","text":"geometry geometry, LINESTRING MULTILINESTRING values documented https://www.hydrosheds.org/products/hydrorivers","code":""},{"path":"https://galenholt.github.io/HydroBOT/reference/basin_rivers.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"River lines in the basin — basin_rivers","text":"HydroRIVERS, https://www.hydrosheds.org/products/hydrorivers","code":""},{"path":"https://galenholt.github.io/HydroBOT/reference/bind_max.html","id":null,"dir":"Reference","previous_headings":"","what":"Add max scenario — bind_max","title":"Add max scenario — bind_max","text":"Add max scenario","code":""},{"path":"https://galenholt.github.io/HydroBOT/reference/bind_max.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Add max scenario — bind_max","text":"","code":"bind_max(outdf)"},{"path":"https://galenholt.github.io/HydroBOT/reference/bind_max.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Add max scenario — bind_max","text":"outdf #EWR summary output pass fail results","code":""},{"path":"https://galenholt.github.io/HydroBOT/reference/bind_max.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Add max scenario — bind_max","text":"tibble MAX scenario added","code":""},{"path":"https://galenholt.github.io/HydroBOT/reference/bom_basin_gauges.html","id":null,"dir":"Reference","previous_headings":"","what":"Gauge locations — bom_basin_gauges","title":"Gauge locations — bom_basin_gauges","text":"Points specifying locations gauging stations. Sourced MDBA gauge getter, though similar dataset (HydrologicIndicatorSites) available MDBA data website. BOM locations used consistency EWR tool. Full list gauges clipped basin polygon.","code":""},{"path":"https://galenholt.github.io/HydroBOT/reference/bom_basin_gauges.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Gauge locations — bom_basin_gauges","text":"","code":"bom_basin_gauges"},{"path":[]},{"path":"https://galenholt.github.io/HydroBOT/reference/bom_basin_gauges.html","id":"bom-basin-gauges-an-sf-object-","dir":"Reference","previous_headings":"","what":"bom_basin_gauges An sf object:","title":"Gauge locations — bom_basin_gauges","text":"site, gauge Name code gauge owner State data available","code":""},{"path":"https://galenholt.github.io/HydroBOT/reference/bom_basin_gauges.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"Gauge locations — bom_basin_gauges","text":"CSV within https://pypi.org/project/mdba-gauge-getter/","code":""},{"path":"https://galenholt.github.io/HydroBOT/reference/causal_colors_general.html","id":null,"dir":"Reference","previous_headings":"","what":"Set colors of nodes or edges — causal_colors_general","title":"Set colors of nodes or edges — causal_colors_general","text":"Given set palettes column data use determine color (possibly grouping column), assigns color node. Can also short-circuited passing scalar color column color names. Edge tibbles get color column, nodes get fillcolor, matching DiagrammeR attribute names. fontcolor attribute also set nodes black white depending fillcolor","code":""},{"path":"https://galenholt.github.io/HydroBOT/reference/causal_colors_general.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Set colors of nodes or edges — causal_colors_general","text":"","code":"causal_colors_general(   df,   pal_list,   pal_direction = rep(1, length(pal_list)),   colorgroups = NULL,   colorset = NULL,   setLimits = NULL )"},{"path":"https://galenholt.github.io/HydroBOT/reference/causal_colors_general.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Set colors of nodes or edges — causal_colors_general","text":"df tibble dataframe, nodes edges pal_list named list paletteer palettes scalar character specifying color. named list: names match values colorgroups column, determine palettes apply rows. colorgroups = NULL, name matter, often clearest match colorset character (scalar vector): short-circuits palette finding creates color column given colors. pal_direction vector length pal_list, either 1 (default) -1 (reversed) direction palettes colorgroups NULL (default) length-1 character vector specifying grouping column, different palettes applied different groups. NULL, one palette applied across rows colorset length-1 character vector specifying column use define color. Type matter, behaviour differs. numeric space colors row according value, numeric, colors row spaced evenly along palette. setLimits NULL (default) length-2 numeric vector force limits color scale.","code":""},{"path":"https://galenholt.github.io/HydroBOT/reference/causal_colors_general.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Set colors of nodes or edges — causal_colors_general","text":"edge tibble color column node tibble fillcolor fontcolor","code":""},{"path":"https://galenholt.github.io/HydroBOT/reference/causal_ewr.html","id":null,"dir":"Reference","previous_headings":"","what":"Causal relationships for the EWRs — causal_ewr","title":"Causal relationships for the EWRs — causal_ewr","text":"List dataframes specifying causal relationships environmental water requirements rest levels specified Long-Term Watering Plans. Previously created HydroBOT, now simply extracted py_ewr (Nov 2024). May remain much longer, extracting EWR tool version get_causal_ewr() preferable.","code":""},{"path":"https://galenholt.github.io/HydroBOT/reference/causal_ewr.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Causal relationships for the EWRs — causal_ewr","text":"","code":"causal_ewr"},{"path":[]},{"path":"https://galenholt.github.io/HydroBOT/reference/causal_ewr.html","id":"causal-ewr-a-list-of-dataframes-","dir":"Reference","previous_headings":"","what":"causal_ewr A list of dataframes:","title":"Causal relationships for the EWRs — causal_ewr","text":"ewr2obj Mapping EWRs gauge environmental objectives (env_obj) obj2target Mapping env_obj Specific_goal, Objective, Target, defined PlanningUnit scale obj2yrtarget Mapping defined without spatial reference env_obj Target, Target_Category, Objective, target_5_year_2024, target_10_year_2029, target_20_year_2039","code":""},{"path":"https://galenholt.github.io/HydroBOT/reference/causal_ewr.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"Causal relationships for the EWRs — causal_ewr","text":"various Long-Term Watering Plans State-based tables. Extracted EWR tool (py_ewr) reexported .","code":""},{"path":"https://galenholt.github.io/HydroBOT/reference/cewo_valleys.html","id":null,"dir":"Reference","previous_headings":"","what":"Catchments within the Murray-Darling Basin — cewo_valleys","title":"Catchments within the Murray-Darling Basin — cewo_valleys","text":"Polygons defining catchment boundaries, defined CEWO. Sourced MDBA data website, direct link given . 'Northern Unregulated' polygon removed, combination several polygons.","code":""},{"path":"https://galenholt.github.io/HydroBOT/reference/cewo_valleys.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Catchments within the Murray-Darling Basin — cewo_valleys","text":"","code":"cewo_valleys"},{"path":[]},{"path":"https://galenholt.github.io/HydroBOT/reference/cewo_valleys.html","id":"cewo-valleys-an-sf-object-","dir":"Reference","previous_headings":"","what":"cewo_valleys An sf object:","title":"Catchments within the Murray-Darling Basin — cewo_valleys","text":"ValleyName, ValleyID, ValleyCode Name, ID, code catchment","code":""},{"path":"https://galenholt.github.io/HydroBOT/reference/cewo_valleys.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"Catchments within the Murray-Darling Basin — cewo_valleys","text":"https://data.gov.au/data/dataset/75910bc5-6c3e-40e8-9c8a-1e895274badb/resource/a7053ee7-8e20-4f2c-b594-cb88c6ed9406/download/cewo_mdb_valleys.shp.zip","code":""},{"path":"https://galenholt.github.io/HydroBOT/reference/check_missing_runs.html","id":null,"dir":"Reference","previous_headings":"","what":"Similar to find_missing_runs, but excised from prep_run_save_ewrs to take the same arguments — check_missing_runs","title":"Similar to find_missing_runs, but excised from prep_run_save_ewrs to take the same arguments — check_missing_runs","text":"Similar find_missing_runs, excised prep_run_save_ewrs take arguments","code":""},{"path":"https://galenholt.github.io/HydroBOT/reference/check_missing_runs.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Similar to find_missing_runs, but excised from prep_run_save_ewrs to take the same arguments — check_missing_runs","text":"","code":"check_missing_runs(   hydro_dir,   output_parent_dir,   output_subdir = \"\",   scenarios = NULL,   file_search = NULL,   model_format = \"Standard time-series\",   outputType = \"none\",   scenarios_from = \"directory\" )"},{"path":"https://galenholt.github.io/HydroBOT/reference/check_missing_runs.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Similar to find_missing_runs, but excised from prep_run_save_ewrs to take the same arguments — check_missing_runs","text":"hydro_dir Directory containing hydrographs. Can outer directory, e.g. hydrographs splits scenario subdirs, can single scenario subdir. output_parent_dir parent directory outputs. Can anything, two typical cases: directory containing hydro_dir, puts module_outputs level hydrographs running batches single scenarios, may hydro_dir, just puts module_outputs hydro_dir output_subdir sub-directory outputs, example want module_output/EWR/V1 module_output/EWR/V2 scenarios NULL (default) named list. NULL- finds scenario names parsing directory names hydro_dir. internal directories, just stays hydro_dir. captures two typical situations discussed output_parent_dir. directories hydro_dir contain hydrological scenarios, use character vector. named list paths files. names become scenario names, paths relative hydro_dir. allows unusual directory structures. file_search character, regex additional limitations filenames. Useful run subset scenarios several files extension defined model_format, hydrographs. model_format see EWR tool. One : 'Standard time-series': (default, among things accepts csv Date column followed gauge columns, _flow _level appended gauge number) 'IQQM - netcdf': development, finds netcdf files hydro_dir. also work hydro_dir .zip netcdfs inside 'ten thousand year': old default (IQQM - NSW 10,000 years), works nearly standard time-series 'Bigmod': previously 'Bigmod - MDBA' 'Source - NSW (res.csv)' outputType list strings character vector defining save disk. One : 'none' (default), save outputs- ignored list others 'summary', 'yearly', 'all_events', 'all_successful_events', 'all_interEvents' 'all_successful_interEvents' scenarios_from character, default 'directory' gets scenario names directory names. anything else, gets filenames (safest). Expect additional options future, e.g metadata.","code":""},{"path":"https://galenholt.github.io/HydroBOT/reference/check_missing_runs.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Similar to find_missing_runs, but excised from prep_run_save_ewrs to take the same arguments — check_missing_runs","text":"character vector missing filepaths","code":""},{"path":"https://galenholt.github.io/HydroBOT/reference/clean_ewr_causal.html","id":null,"dir":"Reference","previous_headings":"","what":"Cleans causal networks that come in from py-ewr — clean_ewr_causal","title":"Cleans causal networks that come in from py-ewr — clean_ewr_causal","text":"Cleans causal networks come py-ewr","code":""},{"path":"https://galenholt.github.io/HydroBOT/reference/clean_ewr_causal.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Cleans causal networks that come in from py-ewr — clean_ewr_causal","text":"","code":"clean_ewr_causal(ewrnet, verbose = FALSE)"},{"path":"https://galenholt.github.io/HydroBOT/reference/clean_ewr_causal.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Cleans causal networks that come in from py-ewr — clean_ewr_causal","text":"ewrnet causal network returned pdi$get_causal_ewr() verbose default FALSE, TRUE, print bunch unique values troubleshooting","code":""},{"path":"https://galenholt.github.io/HydroBOT/reference/clean_ewr_causal.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Cleans causal networks that come in from py-ewr — clean_ewr_causal","text":"list dataframes","code":""},{"path":"https://galenholt.github.io/HydroBOT/reference/clean_ewr_in_R.html","id":null,"dir":"Reference","previous_headings":"","what":"Clean up the EWR outputs so returns look like they do when read from csv. Mostly dateparsing from py objects — clean_ewr_in_R","title":"Clean up the EWR outputs so returns look like they do when read from csv. Mostly dateparsing from py objects — clean_ewr_in_R","text":"Clean EWR outputs returns look like read csv. Mostly dateparsing py objects","code":""},{"path":"https://galenholt.github.io/HydroBOT/reference/clean_ewr_in_R.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Clean up the EWR outputs so returns look like they do when read from csv. Mostly dateparsing from py objects — clean_ewr_in_R","text":"","code":"clean_ewr_in_R(ewr_out)"},{"path":"https://galenholt.github.io/HydroBOT/reference/clean_ewr_in_R.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Clean up the EWR outputs so returns look like they do when read from csv. Mostly dateparsing from py objects — clean_ewr_in_R","text":"ewr_out EWR output dataframe returned directly python R","code":""},{"path":"https://galenholt.github.io/HydroBOT/reference/clean_ewr_in_R.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Clean up the EWR outputs so returns look like they do when read from csv. Mostly dateparsing from py objects — clean_ewr_in_R","text":"tibble, cleaned EWR outputs","code":""},{"path":"https://galenholt.github.io/HydroBOT/reference/clean_ewr_obj.html","id":null,"dir":"Reference","previous_headings":"","what":"Pair EWR indicators to environmental objectives — clean_ewr_obj","title":"Pair EWR indicators to environmental objectives — clean_ewr_obj","text":"Typically, use get_causal_ewr(). Bespoke function clean EWR table LTWP table, extract environmental objectives, pair . need change least extensively retest datasets change","code":""},{"path":"https://galenholt.github.io/HydroBOT/reference/clean_ewr_obj.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Pair EWR indicators to environmental objectives — clean_ewr_obj","text":"","code":"clean_ewr_obj(   ewrobjpath = \"ewrcausal\",   gaugescale = TRUE,   saveout = FALSE,   outdir,   savename )"},{"path":"https://galenholt.github.io/HydroBOT/reference/clean_ewr_obj.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Pair EWR indicators to environmental objectives — clean_ewr_obj","text":"ewrobjpath path ewr-obj mapping. Default 'ewrtool' just uses version tool. gaugescale logical, whether return data gauge scale remapping LTWPShortName gauge (TRUE), just leave LTWPShortName (e.g. sdl unit) scale NSW now defines relationships (FALSE) saveout one FALSE, 'r', 'csv', controls saving type. FALSE: (default): save anything 'r': saves rdata file, used primarily building data directory package 'csv': saves csv name outdir/savename_YearMonthDayHourMinute.csv outdir path directory save . needed saveout FALSE savename character filename save. date time gets appended avoid overwriting","code":""},{"path":"https://galenholt.github.io/HydroBOT/reference/clean_ewr_obj.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Pair EWR indicators to environmental objectives — clean_ewr_obj","text":"tibble columns LTWPShortName, ewr_code, ewr_code_timing, env_obj (gaugescale = FALSE), including PlanningUnitID gauge gaugescale = TRUE)","code":""},{"path":"https://galenholt.github.io/HydroBOT/reference/clean_ewr_requirements.html","id":null,"dir":"Reference","previous_headings":"","what":"Cleans the EWR table to use for assessing target requirements by the outputs — clean_ewr_requirements","title":"Cleans the EWR table to use for assessing target requirements by the outputs — clean_ewr_requirements","text":"Cleans EWR table use assessing target requirements outputs","code":""},{"path":"https://galenholt.github.io/HydroBOT/reference/clean_ewr_requirements.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Cleans the EWR table to use for assessing target requirements by the outputs — clean_ewr_requirements","text":"","code":"clean_ewr_requirements()"},{"path":"https://galenholt.github.io/HydroBOT/reference/clean_ewr_requirements.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Cleans the EWR table to use for assessing target requirements by the outputs — clean_ewr_requirements","text":"clean tibble suitable joining outputs","code":""},{"path":"https://galenholt.github.io/HydroBOT/reference/clean_ewr_yearly.html","id":null,"dir":"Reference","previous_headings":"","what":"Additional cleanup specific to yearly EWR outputs. — clean_ewr_yearly","title":"Additional cleanup specific to yearly EWR outputs. — clean_ewr_yearly","text":"Additional cleanup specific yearly EWR outputs.","code":""},{"path":"https://galenholt.github.io/HydroBOT/reference/clean_ewr_yearly.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Additional cleanup specific to yearly EWR outputs. — clean_ewr_yearly","text":"","code":"clean_ewr_yearly(annualdf)"},{"path":"https://galenholt.github.io/HydroBOT/reference/clean_ewr_yearly.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Additional cleanup specific to yearly EWR outputs. — clean_ewr_yearly","text":"annualdf result get_module_output() EWR data type = 'yearly'","code":""},{"path":"https://galenholt.github.io/HydroBOT/reference/clean_ewr_yearly.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Additional cleanup specific to yearly EWR outputs. — clean_ewr_yearly","text":"tibble cleaned yearly EWR output","code":""},{"path":"https://galenholt.github.io/HydroBOT/reference/clean_long_term.html","id":null,"dir":"Reference","previous_headings":"","what":"Process objective-long term target links — clean_long_term","title":"Process objective-long term target links — clean_long_term","text":"DEPRECATED- use get_causal_ewr(). Bespoke function clean current input data","code":""},{"path":"https://galenholt.github.io/HydroBOT/reference/clean_long_term.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Process objective-long term target links — clean_long_term","text":"","code":"clean_long_term(yrpath, saveout = FALSE, outdir, savename)"},{"path":"https://galenholt.github.io/HydroBOT/reference/clean_long_term.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Process objective-long term target links — clean_long_term","text":"yrpath path file matched objectives targets saveout logical. saves file output outdir/savename_YearMonthDayHourMinute.csv outdir path directory save . needed saveout FALSE savename one FALSE, 'r', 'csv', controls saving type. FALSE: (default): save anything 'r': saves rdata file, used primarily building data directory package 'csv': saves csv name outdir/savename_YearMonthDayHourMinute.csv","code":""},{"path":"https://galenholt.github.io/HydroBOT/reference/clean_long_term.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Process objective-long term target links — clean_long_term","text":"tibble matching env_objs, Targets, Objectives, 5,10, 20 year targets. spatial information (gauge, planning unit)","code":""},{"path":"https://galenholt.github.io/HydroBOT/reference/clean_obj_target.html","id":null,"dir":"Reference","previous_headings":"","what":"Pair environmental objectives to various targets and objectives — clean_obj_target","title":"Pair environmental objectives to various targets and objectives — clean_obj_target","text":"DEPRECATED- use get_causal_ewr().Bespoke function clean current input data.","code":""},{"path":"https://galenholt.github.io/HydroBOT/reference/clean_obj_target.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Pair environmental objectives to various targets and objectives — clean_obj_target","text":"","code":"clean_obj_target(   ewrobjs,   targetpath,   qcfiles,   saveout = FALSE,   outdir,   savename )"},{"path":"https://galenholt.github.io/HydroBOT/reference/clean_obj_target.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Pair environmental objectives to various targets and objectives — clean_obj_target","text":"ewrobjs tibble data.frame EWR indicators paired environmental objectives. \"long\" output clean_ewr_obj targetpath path table linking objectives targets qcfiles list paths QC files Renee saveout one FALSE, 'r', 'csv', controls saving type. FALSE: (default): save anything 'r': saves rdata file, used primarily building data directory package 'csv': saves csv name outdir/savename_YearMonthDayHourMinute.csv outdir path directory save . needed saveout FALSE savename character filename save. date time gets appended avoid overwriting","code":""},{"path":"https://galenholt.github.io/HydroBOT/reference/clean_obj_target.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Pair environmental objectives to various targets and objectives — clean_obj_target","text":"tibble linking env_obj several different outcomes- Specific_goal (roughly species, also things like refugia), Objective (bigger-picture, e.g. loss native fish species), Target (Native Fish, Ecosystem Function, etc). Planning Unit scale.","code":""},{"path":"https://galenholt.github.io/HydroBOT/reference/clean_sequences.html","id":null,"dir":"Reference","previous_headings":"","what":"Clean up the sequences if they are provided in r scripts or otherwise — clean_sequences","title":"Clean up the sequences if they are provided in r scripts or otherwise — clean_sequences","text":"Clean sequences provided r scripts otherwise","code":""},{"path":"https://galenholt.github.io/HydroBOT/reference/clean_sequences.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Clean up the sequences if they are provided in r scripts or otherwise — clean_sequences","text":"","code":"clean_sequences(arglist)"},{"path":"https://galenholt.github.io/HydroBOT/reference/clean_sequences.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Clean up the sequences if they are provided in r scripts or otherwise — clean_sequences","text":"arglist","code":""},{"path":"https://galenholt.github.io/HydroBOT/reference/clean_sequences.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Clean up the sequences if they are provided in r scripts or otherwise — clean_sequences","text":"arglist","code":""},{"path":"https://galenholt.github.io/HydroBOT/reference/cleanewrs.html","id":null,"dir":"Reference","previous_headings":"","what":"Clean up and standardise names and column types — cleanewrs","title":"Clean up and standardise names and column types — cleanewrs","text":"new format EWR output makes much lighter previously.","code":""},{"path":"https://galenholt.github.io/HydroBOT/reference/cleanewrs.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Clean up and standardise names and column types — cleanewrs","text":"","code":"cleanewrs(ewrdf)"},{"path":"https://galenholt.github.io/HydroBOT/reference/cleanewrs.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Clean up and standardise names and column types — cleanewrs","text":"ewrdf ewr dataframe type","code":""},{"path":"https://galenholt.github.io/HydroBOT/reference/cleanewrs.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Clean up and standardise names and column types — cleanewrs","text":"tibble EWR outputs cleaned names, separated ewr_code_timing, gauges characters","code":""},{"path":"https://galenholt.github.io/HydroBOT/reference/create_base.html","id":null,"dir":"Reference","previous_headings":"","what":"Creates a baseline column in several different ways. Helper for baseline_compare() but useful elsewhere too — create_base","title":"Creates a baseline column in several different ways. Helper for baseline_compare() but useful elsewhere too — create_base","text":"Creates baseline column several different ways. Helper baseline_compare() useful elsewhere ","code":""},{"path":"https://galenholt.github.io/HydroBOT/reference/create_base.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Creates a baseline column in several different ways. Helper for baseline_compare() but useful elsewhere too — create_base","text":"","code":"create_base(   val_df,   compare_col,   base_lev,   values_col,   group_cols = NULL,   failmissing = TRUE,   names_to,   values_to )"},{"path":"https://galenholt.github.io/HydroBOT/reference/create_base.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Creates a baseline column in several different ways. Helper for baseline_compare() but useful elsewhere too — create_base","text":"val_df dataframe values compare_col column columns use grouping- needed baseline one level column. Otherwise ignored base_lev value baseline. Can level compare_col, scalar, vector length(unique(val_df$compare_col)). dataframe useful yet implemented. values_col column containing values. Can character tidyselect bare names, though last fragile. group_cols character, columns group baselining . Often spatial env_obj similar. failmissing logical, default TRUE. Use tidyselect::any_of tidyselect::all_of values_col compare_col character. see selectcreator() names_to character, tidyr::pivot_longer(), used auto-pivotting values_to character, tidyr::pivot_longer(), used auto-pivotting","code":""},{"path":"https://galenholt.github.io/HydroBOT/reference/create_base.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Creates a baseline column in several different ways. Helper for baseline_compare() but useful elsewhere too — create_base","text":"tibble matching val_df (long version thereof val_df wide), added column reference level (named ref_values_col)","code":""},{"path":"https://galenholt.github.io/HydroBOT/reference/difference.html","id":null,"dir":"Reference","previous_headings":"","what":"Difference — difference","title":"Difference — difference","text":"Easily-callable wrapper -","code":""},{"path":"https://galenholt.github.io/HydroBOT/reference/difference.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Difference — difference","text":"","code":"difference(x, y)"},{"path":"https://galenholt.github.io/HydroBOT/reference/difference.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Difference — difference","text":"x data compare y reference data","code":""},{"path":"https://galenholt.github.io/HydroBOT/reference/difference.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Difference — difference","text":"numeric, -","code":""},{"path":"https://galenholt.github.io/HydroBOT/reference/extract_vals_causal.html","id":null,"dir":"Reference","previous_headings":"","what":"Extracts and arranges the aggregated values for use in causal network plots. — extract_vals_causal","title":"Extracts and arranges the aggregated values for use in causal network plots. — extract_vals_causal","text":"takes aggregations stage along theme axis, extracts aggregated values given aggregation history (ie sequence aggregation functions), returns form can added edges nodes dfs.","code":""},{"path":"https://galenholt.github.io/HydroBOT/reference/extract_vals_causal.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Extracts and arranges the aggregated values for use in causal network plots. — extract_vals_causal","text":"","code":"extract_vals_causal(agglist, whichaggs, valcol, targetlevels = names(agglist))"},{"path":"https://galenholt.github.io/HydroBOT/reference/extract_vals_causal.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Extracts and arranges the aggregated values for use in causal network plots. — extract_vals_causal","text":"agglist list tibbles step theme aggregation (output theme_agg_multi saveintermediate = TRUE). Currently assumes aggregation history already columns (either theme_agg_multi namehistory = FALSE run agg_names_to_cols). fairly easy detect add call agg_names_to_cols becomes issue. whichaggs character vector list one string per list item desired sequence aggregation functions. values used aggregation used create agglist, can one entry per step (unlike creation agglist). different aggregation histories required, run , appropriate mix histories causal plot. valcol character, name column aggregated values. targetlevels character, names levels include. Defaults names(agglist). subset names can used.","code":""},{"path":"https://galenholt.github.io/HydroBOT/reference/extract_vals_causal.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Extracts and arranges the aggregated values for use in causal network plots. — extract_vals_causal","text":"tibble grouping variables scenario gauge, column values named valcol, Name NodeType columns allow joining node df.","code":""},{"path":"https://galenholt.github.io/HydroBOT/reference/find_color_type.html","id":null,"dir":"Reference","previous_headings":"","what":"Helper to find the type of color specification, so we can call the right ggplot::scale_color_* — find_color_type","title":"Helper to find the type of color specification, so we can call the right ggplot::scale_color_* — find_color_type","text":"Four options: pal_list named colors object return indication use scale_*manual(values = pal_list) pal_list paletteer palette name return indication use scale_paletteer_*(pal_list) pal_list list, need deal grouped colors find colors use, return data along indication use scale_*identity pal_list single color value automate things like making colors object data pal_list; necessary fraught.","code":""},{"path":"https://galenholt.github.io/HydroBOT/reference/find_color_type.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Helper to find the type of color specification, so we can call the right ggplot::scale_color_* — find_color_type","text":"","code":"find_color_type(pal_list)"},{"path":"https://galenholt.github.io/HydroBOT/reference/find_color_type.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Helper to find the type of color specification, so we can call the right ggplot::scale_color_* — find_color_type","text":"pal_list plot_outcomes()","code":""},{"path":"https://galenholt.github.io/HydroBOT/reference/find_color_type.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Helper to find the type of color specification, so we can call the right ggplot::scale_color_* — find_color_type","text":"character, one 'colorobj', 'paletteer_c', 'paletteer_d', 'grouped', 'fixed' help functions know wiht color/fill","code":""},{"path":"https://galenholt.github.io/HydroBOT/reference/find_expected_files.html","id":null,"dir":"Reference","previous_headings":"","what":"Figure out the expected outputs — find_expected_files","title":"Figure out the expected outputs — find_expected_files","text":"Figure expected outputs","code":""},{"path":"https://galenholt.github.io/HydroBOT/reference/find_expected_files.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Figure out the expected outputs — find_expected_files","text":"","code":"find_expected_files(hydro_paths, output_path, outputType, scenarios_from)"},{"path":"https://galenholt.github.io/HydroBOT/reference/find_expected_files.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Figure out the expected outputs — find_expected_files","text":"hydro_paths list paths scenario files names scenario names output_path path outputs outputType types outputs, inferring csvs scenarios_from prep_run_save_ewrs()","code":""},{"path":"https://galenholt.github.io/HydroBOT/reference/find_expected_files.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Figure out the expected outputs — find_expected_files","text":"character vector expected filepaths","code":""},{"path":"https://galenholt.github.io/HydroBOT/reference/find_limits.html","id":null,"dir":"Reference","previous_headings":"","what":"Finds limits for y-axis and colors — find_limits","title":"Finds limits for y-axis and colors — find_limits","text":"Finds limits y-axis colors","code":""},{"path":"https://galenholt.github.io/HydroBOT/reference/find_limits.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Finds limits for y-axis and colors — find_limits","text":"","code":"find_limits(limcol, lims, trans, base_list)"},{"path":"https://galenholt.github.io/HydroBOT/reference/find_limits.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Finds limits for y-axis and colors — find_limits","text":"limcol vector y-values, typically sf::st_drop_geometry(prepped$data[prepped$outcome_col]) lims desired limits. see setLimits plot_outcomes() trans transform base_list plot_outcomes()","code":""},{"path":"https://galenholt.github.io/HydroBOT/reference/find_limits.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Finds limits for y-axis and colors — find_limits","text":"length-2 limits (NULL)","code":""},{"path":"https://galenholt.github.io/HydroBOT/reference/find_missing_runs.html","id":null,"dir":"Reference","previous_headings":"","what":"Figure out missing expected outputs — find_missing_runs","title":"Figure out missing expected outputs — find_missing_runs","text":"Figure missing expected outputs","code":""},{"path":"https://galenholt.github.io/HydroBOT/reference/find_missing_runs.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Figure out missing expected outputs — find_missing_runs","text":"","code":"find_missing_runs(hydro_paths, output_path, outputType, scenarios_from)"},{"path":"https://galenholt.github.io/HydroBOT/reference/find_missing_runs.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Figure out missing expected outputs — find_missing_runs","text":"hydro_paths list paths scenario files names scenario names output_path path outputs outputType types outputs, inferring csvs scenarios_from prep_run_save_ewrs()","code":""},{"path":"https://galenholt.github.io/HydroBOT/reference/find_missing_runs.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Figure out missing expected outputs — find_missing_runs","text":"character vector missing paths","code":""},{"path":"https://galenholt.github.io/HydroBOT/reference/find_related_nodes.html","id":null,"dir":"Reference","previous_headings":"","what":"Finds all nodes upstream and downstream of a set of focal nodes — find_related_nodes","title":"Finds all nodes upstream and downstream of a set of focal nodes — find_related_nodes","text":"Given small set nodes, function finds related nodes beginning end network. allows branching directions, reverse. example, given focal node level 2, finds connected nodes levels 1, 3,4...n, level 2 nodes related level 3 nodes.","code":""},{"path":"https://galenholt.github.io/HydroBOT/reference/find_related_nodes.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Finds all nodes upstream and downstream of a set of focal nodes — find_related_nodes","text":"","code":"find_related_nodes(edgedf, nodenames)"},{"path":"https://galenholt.github.io/HydroBOT/reference/find_related_nodes.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Finds all nodes upstream and downstream of a set of focal nodes — find_related_nodes","text":"edgedf tibble defining edges network (relationships nodes) nodenames character vector focal nodenames. within level network.","code":""},{"path":"https://galenholt.github.io/HydroBOT/reference/find_related_nodes.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Finds all nodes upstream and downstream of a set of focal nodes — find_related_nodes","text":"character vector nodenames related focal nodes","code":""},{"path":"https://galenholt.github.io/HydroBOT/reference/find_scenario_paths.html","id":null,"dir":"Reference","previous_headings":"","what":"get the paths to scenarios — find_scenario_paths","title":"get the paths to scenarios — find_scenario_paths","text":"get paths scenarios","code":""},{"path":"https://galenholt.github.io/HydroBOT/reference/find_scenario_paths.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"get the paths to scenarios — find_scenario_paths","text":"","code":"find_scenario_paths(   hydro_dir,   type = \"csv\",   scenarios_from = \"directory\",   file_search = NULL )"},{"path":"https://galenholt.github.io/HydroBOT/reference/find_scenario_paths.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"get the paths to scenarios — find_scenario_paths","text":"hydro_dir directory hydrographs type filetype, default 'csv', likely also need 'ncdf' scenarios_from prep_run_save_ewrs() file_search character, regex additional limitations filenames. Useful several files extension defined type, hydrographs.","code":""},{"path":"https://galenholt.github.io/HydroBOT/reference/find_scenario_paths.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"get the paths to scenarios — find_scenario_paths","text":"list filepaths hydrographs","code":""},{"path":"https://galenholt.github.io/HydroBOT/reference/fix_file_scenarios.html","id":null,"dir":"Reference","previous_headings":"","what":"Fixes potential issue with non-unique scenario names, which may involve file renaming — fix_file_scenarios","title":"Fixes potential issue with non-unique scenario names, which may involve file renaming — fix_file_scenarios","text":"'scenario' gets csv name. happens inside EWR tool- _get_file_names function .split('/') filepath name scenario. causes issues csvs per gauge, just gaugename. case EWR tool assigns gaugename scenario. need ensure happen. think probably best way encourage use single files per scenario, , filenames scenario name gauge name. function tests issue, tries fix informs warns user name files better","code":""},{"path":"https://galenholt.github.io/HydroBOT/reference/fix_file_scenarios.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Fixes potential issue with non-unique scenario names, which may involve file renaming — fix_file_scenarios","text":"","code":"fix_file_scenarios(hydro_paths, scenarios)"},{"path":"https://galenholt.github.io/HydroBOT/reference/fix_file_scenarios.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Fixes potential issue with non-unique scenario names, which may involve file renaming — fix_file_scenarios","text":"hydro_paths paths hydrographs, typically find_scenario_paths() scenarios names scenarios, useful cross-checking","code":""},{"path":"https://galenholt.github.io/HydroBOT/reference/fix_file_scenarios.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Fixes potential issue with non-unique scenario names, which may involve file renaming — fix_file_scenarios","text":"paths hydrographs, possibly fixed","code":""},{"path":"https://galenholt.github.io/HydroBOT/reference/functionlister.html","id":null,"dir":"Reference","previous_headings":"","what":"Function cleanup to allow passing character, bare names, and list-formatted functions — functionlister","title":"Function cleanup to allow passing character, bare names, and list-formatted functions — functionlister","text":"Function cleanup allow passing character, bare names, list-formatted functions","code":""},{"path":"https://galenholt.github.io/HydroBOT/reference/functionlister.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Function cleanup to allow passing character, bare names, and list-formatted functions — functionlister","text":"","code":"functionlister(funs, forcenames = NULL)"},{"path":"https://galenholt.github.io/HydroBOT/reference/functionlister.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Function cleanup to allow passing character, bare names, and list-formatted functions — functionlister","text":"funs function evaluate inside something else, character, bare name, list forcenames force-name functions. Often used names auto-populate correctly","code":""},{"path":"https://galenholt.github.io/HydroBOT/reference/functionlister.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Function cleanup to allow passing character, bare names, and list-formatted functions — functionlister","text":"named list functions","code":""},{"path":"https://galenholt.github.io/HydroBOT/reference/general_aggregate.html","id":null,"dir":"Reference","previous_headings":"","what":"Aggregate data along theme dimension — general_aggregate","title":"Aggregate data along theme dimension — general_aggregate","text":"core aggregation function aggregation types. really fairly lightweight wrapper small dplyr::group_by summarise handle passing grouping columns, aggregation columns, functions arguments handle naming. assumes spatial information deal . Preparing data proper grouping columns job outer calling functions (user)","code":""},{"path":"https://galenholt.github.io/HydroBOT/reference/general_aggregate.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Aggregate data along theme dimension — general_aggregate","text":"","code":"general_aggregate(   data,   groupers,   aggCols,   funlist,   prefix = \"agg_\",   failmissing = TRUE,   ... )"},{"path":"https://galenholt.github.io/HydroBOT/reference/general_aggregate.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Aggregate data along theme dimension — general_aggregate","text":"data dataframe tibble data aggregate groupers expression columns use grouping variables aggregation (see selectcreator formats) aggCols expression columns aggregate (data columns). See selectcreator formats funlist list functions arguments used aggregate data. See functionlister creation many cases. situation bare anonymous function, e.g. ~mean(., na.rm = T) supported need name. Use named list using anonymous functions, e.g. list(mean = ~mean(., na.rm = T)). using functions data-variable argument, e.g. weighted.mean column weights, now (dplyr 1.1) workarounds. One option specified function argument, function can just go bare name anonymous. specified elsewhere, can wrapped rlang::quo(), e.g. agglist <- rlang::quo(list(mean = mean, wm = ~weighted.mean(., weight_column_name, na.rm = T))). , now internal workaround add seems stable may cause unforeseen issues. workaround also allows building custom aggregation functions (-anonymous) data-variable argument either exposed hardcoded (see SpatialWeightedMean()). error checks names work quosures, make sure name list using rlang::quo(). prefix character prefix column name. Default \"agg_\", often better use aggregation step. Typically set particular calling function give type aggregation failmissing logical, default TRUE: fail requested grouping aggregation columns exist. FALSE, proceed exist silently drop . Similar tidyselect::all_of() vs tidyselect::any_of() tidyselect ... arguments passed aggregation functions. limited, work data arguments conditions. Almost always better specify explicitly building funlist, works OK simple functions, e.g. passing na.rm = TRUE mean","code":""},{"path":"https://galenholt.github.io/HydroBOT/reference/general_aggregate.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Aggregate data along theme dimension — general_aggregate","text":"tibble columns grouping variables column within-group aggregated values aggCol function funlist, named according function applied original name.","code":""},{"path":"https://galenholt.github.io/HydroBOT/reference/get_causal_ewr.html","id":null,"dir":"Reference","previous_headings":"","what":"Extract causal network from EWR tool — get_causal_ewr","title":"Extract causal network from EWR tool — get_causal_ewr","text":"Extract causal network EWR tool","code":""},{"path":"https://galenholt.github.io/HydroBOT/reference/get_causal_ewr.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Extract causal network from EWR tool — get_causal_ewr","text":"","code":"get_causal_ewr()"},{"path":"https://galenholt.github.io/HydroBOT/reference/get_causal_ewr.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Extract causal network from EWR tool — get_causal_ewr","text":"list EWR causal networks","code":""},{"path":"https://galenholt.github.io/HydroBOT/reference/get_data_agg.html","id":null,"dir":"Reference","previous_headings":"","what":"The data aggregation extractor for make_plot_table — get_data_agg","title":"The data aggregation extractor for make_plot_table — get_data_agg","text":"data aggregation extractor make_plot_table","code":""},{"path":"https://galenholt.github.io/HydroBOT/reference/get_data_agg.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"The data aggregation extractor for make_plot_table — get_data_agg","text":"","code":"get_data_agg(werp_plot)"},{"path":"https://galenholt.github.io/HydroBOT/reference/get_data_agg.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"The data aggregation extractor for make_plot_table — get_data_agg","text":"werp_plot ggplot object WERP-style data underneath. Needs aggregation sequence columns, column name.","code":""},{"path":"https://galenholt.github.io/HydroBOT/reference/get_ewr_gauges.html","id":null,"dir":"Reference","previous_headings":"","what":"get the gauges from the EWR tool — get_ewr_gauges","title":"get the gauges from the EWR tool — get_ewr_gauges","text":"get gauges EWR tool","code":""},{"path":"https://galenholt.github.io/HydroBOT/reference/get_ewr_gauges.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"get the gauges from the EWR tool — get_ewr_gauges","text":"","code":"get_ewr_gauges()"},{"path":"https://galenholt.github.io/HydroBOT/reference/get_ewr_gauges.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"get the gauges from the EWR tool — get_ewr_gauges","text":"sf unique gauges good EWRs","code":""},{"path":"https://galenholt.github.io/HydroBOT/reference/get_ewr_table.html","id":null,"dir":"Reference","previous_headings":"","what":"Get the table of EWRs from the EWR tool — get_ewr_table","title":"Get the table of EWRs from the EWR tool — get_ewr_table","text":"Get table EWRs EWR tool","code":""},{"path":"https://galenholt.github.io/HydroBOT/reference/get_ewr_table.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get the table of EWRs from the EWR tool — get_ewr_table","text":"","code":"get_ewr_table(type = \"good\")"},{"path":"https://galenholt.github.io/HydroBOT/reference/get_ewr_table.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get the table of EWRs from the EWR tool — get_ewr_table","text":"type 'good', default, 'bad'","code":""},{"path":"https://galenholt.github.io/HydroBOT/reference/get_ewr_table.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get the table of EWRs from the EWR tool — get_ewr_table","text":"dataframe ewr table","code":""},{"path":"https://galenholt.github.io/HydroBOT/reference/get_ewr_version.html","id":null,"dir":"Reference","previous_headings":"","what":"Extract the package version. Does not get complications like git branches. — get_ewr_version","title":"Extract the package version. Does not get complications like git branches. — get_ewr_version","text":"Extract package version. get complications like git branches.","code":""},{"path":"https://galenholt.github.io/HydroBOT/reference/get_ewr_version.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Extract the package version. Does not get complications like git branches. — get_ewr_version","text":"","code":"get_ewr_version()"},{"path":"https://galenholt.github.io/HydroBOT/reference/get_ewr_version.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Extract the package version. Does not get complications like git branches. — get_ewr_version","text":"character version number py-ewr package","code":""},{"path":"https://galenholt.github.io/HydroBOT/reference/get_iqqm_gauges.html","id":null,"dir":"Reference","previous_headings":"","what":"Get the mapping of gauges to IQQM nodes for netcdf — get_iqqm_gauges","title":"Get the mapping of gauges to IQQM nodes for netcdf — get_iqqm_gauges","text":"Get mapping gauges IQQM nodes netcdf","code":""},{"path":"https://galenholt.github.io/HydroBOT/reference/get_iqqm_gauges.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get the mapping of gauges to IQQM nodes for netcdf — get_iqqm_gauges","text":"","code":"get_iqqm_gauges()"},{"path":"https://galenholt.github.io/HydroBOT/reference/get_iqqm_gauges.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get the mapping of gauges to IQQM nodes for netcdf — get_iqqm_gauges","text":"dataframe ewr table","code":""},{"path":"https://galenholt.github.io/HydroBOT/reference/get_module_output.html","id":null,"dir":"Reference","previous_headings":"","what":"Get the outputs from modules and do minor cleaning — get_module_output","title":"Get the outputs from modules and do minor cleaning — get_module_output","text":"NOTE Individual modules may need bespoke processing, see prep_ewr_output().","code":""},{"path":"https://galenholt.github.io/HydroBOT/reference/get_module_output.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get the outputs from modules and do minor cleaning — get_module_output","text":"","code":"get_module_output(dir, type, gaugefilter = NULL, scenariofilter = NULL, ...)"},{"path":"https://galenholt.github.io/HydroBOT/reference/get_module_output.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get the outputs from modules and do minor cleaning — get_module_output","text":"dir path directory EWR output gauges scenarios type character, grep files choose. special case 'everything' gets files gaugefilter character vector gauge numbers include. Default NULL includes scenariofilter character vector scenario names include. Default NULL includes ... unused, absorbs extra args","code":""},{"path":"https://galenholt.github.io/HydroBOT/reference/get_module_output.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get the outputs from modules and do minor cleaning — get_module_output","text":"tibble module results","code":""},{"path":"https://galenholt.github.io/HydroBOT/reference/grouped_colors.html","id":null,"dir":"Reference","previous_headings":"","what":"Sets up colors within groups according to separate palettes — grouped_colors","title":"Sets up colors within groups according to separate palettes — grouped_colors","text":"Sets colors within groups according separate palettes","code":""},{"path":"https://galenholt.github.io/HydroBOT/reference/grouped_colors.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Sets up colors within groups according to separate palettes — grouped_colors","text":"","code":"grouped_colors(   df,   pal_list,   pal_direction = rep(1, length(pal_list)),   colorgroups = NULL,   colorset = NULL,   setLimits = NULL )"},{"path":"https://galenholt.github.io/HydroBOT/reference/grouped_colors.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Sets up colors within groups according to separate palettes — grouped_colors","text":"df input dataframe pal_list list palettes, color name color object maps colorgroups, colorset, scenario. Typically list names palletteer palettes length unique values colorgroups pal_direction vector length pal_list, either 1 (default) -1 (reversed) direction palettes colorgroups character column name column defining groups define different palettes use colorset character column name values assign colors palettes setLimits NULL (default) length-2 numeric vector force limits color scale.","code":""},{"path":"https://galenholt.github.io/HydroBOT/reference/grouped_colors.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Sets up colors within groups according to separate palettes — grouped_colors","text":"dataframe new column color hex colors","code":""},{"path":"https://galenholt.github.io/HydroBOT/reference/handle_palettes.html","id":null,"dir":"Reference","previous_headings":"","what":"Makes the calls to scale_fill_* and scale_color_*, depending on whether color/fill and the palette type needed — handle_palettes","title":"Makes the calls to scale_fill_* and scale_color_*, depending on whether color/fill and the palette type needed — handle_palettes","text":"Uses aes_type know color/fill, color_type (find_color_type()) know ggplot function use add color. Needs handle color trans well transoutcome","code":""},{"path":"https://galenholt.github.io/HydroBOT/reference/handle_palettes.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Makes the calls to scale_fill_* and scale_color_*, depending on whether color/fill and the palette type needed — handle_palettes","text":"","code":"handle_palettes(   ggobj,   aes_type,   pal_list,   color_type,   transoutcome = \"identity\",   setLimits = NULL,   pal_direction = rep(1, length(pal_list)),   base_list = NULL,   nbins = 10 )"},{"path":"https://galenholt.github.io/HydroBOT/reference/handle_palettes.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Makes the calls to scale_fill_* and scale_color_*, depending on whether color/fill and the palette type needed — handle_palettes","text":"ggobj -construction ggplot object aes_type 'color' 'fill' pal_list list palettes defining colors colorset. length colorgroups color_type find_color_type() transoutcome transformation outcome ggplot2::scale_y_continuous() ggplot2::scale_fill_continuous(). Default transoutcome = 'identity' just uses data. common change likely transoutcome = 'log10 setLimits sets user-supplied color/fill limits midpoints maps, heatmaps, networks, y limits plots. Also sets underlay overlay limits consistency. NULL (default) use internally-calculated limits length-1 numeric, sets midpoint, limits stay auto-calculated. V. useful divergent length-2 numeric, sets lower upper limits length-3 numeric, sets limits midpoint c(lower, mid, upper), caveat one limit may ignored (must symmetrical midpoint) base_list 'difference' 'relative', midpoints auto-set 0 1 (respectively) unless otherwise specified . pal_direction vector length pal_list, either 1 (default) -1 (reversed) direction palettes base_list NULL (default) named list arguments baseline_compare(); base_lev comp_fun group_cols plot_data_prep() handles zero_adjust, arguments inferred supported comp_fun 'difference' 'relative', midpoint auto-set 0 1 respectively unless otherwise specified setLimits nbins number bins contours","code":""},{"path":"https://galenholt.github.io/HydroBOT/reference/handle_palettes.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Makes the calls to scale_fill_* and scale_color_*, depending on whether color/fill and the palette type needed — handle_palettes","text":"modified ggplot object","code":""},{"path":"https://galenholt.github.io/HydroBOT/reference/identify_dimension.html","id":null,"dir":"Reference","previous_headings":"","what":"Helper to identify the dimension of each step in aggsequence — identify_dimension","title":"Helper to identify the dimension of each step in aggsequence — identify_dimension","text":"Helper identify dimension step aggsequence","code":""},{"path":"https://galenholt.github.io/HydroBOT/reference/identify_dimension.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Helper to identify the dimension of each step in aggsequence — identify_dimension","text":"","code":"identify_dimension(aggsequence, causal_edges)"},{"path":"https://galenholt.github.io/HydroBOT/reference/identify_dimension.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Helper to identify the dimension of each step in aggsequence — identify_dimension","text":"aggsequence named list aggregation steps order apply . Entries theme aggregation character vectors- e.g. name = c('from_theme', 'to_theme'). Entries spatial aggregation sf polygon aggregate , e.g. name = sfpolygons length-1 character, e.g. name = \"sfpolygons\". latter requires object available get(\"sfpolygons\"), allows passing characters rather objects. requiring names high list improvements. want able re-run auto-saved metadata params, need names spatial levels match object, e.g. basin: basin. causal_edges causal links theme levels included aggsequence, though can also include others, ignored. Creates theme grouping","code":""},{"path":"https://galenholt.github.io/HydroBOT/reference/identify_dimension.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Helper to identify the dimension of each step in aggsequence — identify_dimension","text":"character vector 'spatial', 'theme' 'temporal' step aggsequence","code":""},{"path":"https://galenholt.github.io/HydroBOT/reference/is_notpoint.html","id":null,"dir":"Reference","previous_headings":"","what":"Test whether an object is an sf other than a point — is_notpoint","title":"Test whether an object is an sf other than a point — is_notpoint","text":"just !is_point(), still needs sf.","code":""},{"path":"https://galenholt.github.io/HydroBOT/reference/is_notpoint.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Test whether an object is an sf other than a point — is_notpoint","text":"","code":"is_notpoint(x)"},{"path":"https://galenholt.github.io/HydroBOT/reference/is_notpoint.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Test whether an object is an sf other than a point — is_notpoint","text":"x dataframe object","code":""},{"path":"https://galenholt.github.io/HydroBOT/reference/is_notpoint.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Test whether an object is an sf other than a point — is_notpoint","text":"logical, TRUE sf data POINTs","code":""},{"path":"https://galenholt.github.io/HydroBOT/reference/is_point.html","id":null,"dir":"Reference","previous_headings":"","what":"Test whether an object is a spatial point sf — is_point","title":"Test whether an object is a spatial point sf — is_point","text":"data sf contain points","code":""},{"path":"https://galenholt.github.io/HydroBOT/reference/is_point.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Test whether an object is a spatial point sf — is_point","text":"","code":"is_point(x)"},{"path":"https://galenholt.github.io/HydroBOT/reference/is_point.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Test whether an object is a spatial point sf — is_point","text":"x dataframe object","code":""},{"path":"https://galenholt.github.io/HydroBOT/reference/is_point.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Test whether an object is a spatial point sf — is_point","text":"logical, TRUE sf data POINTs","code":""},{"path":"https://galenholt.github.io/HydroBOT/reference/is_sf.html","id":null,"dir":"Reference","previous_headings":"","what":"Test whether an object is an sf — is_sf","title":"Test whether an object is an sf — is_sf","text":"Test whether object sf","code":""},{"path":"https://galenholt.github.io/HydroBOT/reference/is_sf.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Test whether an object is an sf — is_sf","text":"","code":"is_sf(x)"},{"path":"https://galenholt.github.io/HydroBOT/reference/is_sf.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Test whether an object is an sf — is_sf","text":"x anything, typically dataframe","code":""},{"path":"https://galenholt.github.io/HydroBOT/reference/is_sf.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Test whether an object is an sf — is_sf","text":"Logical","code":""},{"path":"https://galenholt.github.io/HydroBOT/reference/is_sf.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Test whether an object is an sf — is_sf","text":"","code":"is_sf(basin) #> [1] TRUE is_sf(iris) #> [1] FALSE"},{"path":"https://galenholt.github.io/HydroBOT/reference/is_theme.html","id":null,"dir":"Reference","previous_headings":"","what":"Test whether a list-item specifies a theme dimension — is_theme","title":"Test whether a list-item specifies a theme dimension — is_theme","text":"Intended purrr-ed aggsequence","code":""},{"path":"https://galenholt.github.io/HydroBOT/reference/is_theme.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Test whether a list-item specifies a theme dimension — is_theme","text":"","code":"is_theme(x, causalnames)"},{"path":"https://galenholt.github.io/HydroBOT/reference/is_theme.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Test whether a list-item specifies a theme dimension — is_theme","text":"x list-item causalnames names columns causal network","code":""},{"path":"https://galenholt.github.io/HydroBOT/reference/is_theme.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Test whether a list-item specifies a theme dimension — is_theme","text":"logical","code":""},{"path":"https://galenholt.github.io/HydroBOT/reference/is_time.html","id":null,"dir":"Reference","previous_headings":"","what":"Test whether a list-item is time, including using base::cut.Date() specifications — is_time","title":"Test whether a list-item is time, including using base::cut.Date() specifications — is_time","text":"Intended purrr-ed aggsequence","code":""},{"path":"https://galenholt.github.io/HydroBOT/reference/is_time.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Test whether a list-item is time, including using base::cut.Date() specifications — is_time","text":"","code":"is_time(x)"},{"path":"https://galenholt.github.io/HydroBOT/reference/is_time.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Test whether a list-item is time, including using base::cut.Date() specifications — is_time","text":"x list-item","code":""},{"path":"https://galenholt.github.io/HydroBOT/reference/is_time.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Test whether a list-item is time, including using base::cut.Date() specifications — is_time","text":"Logical","code":""},{"path":"https://galenholt.github.io/HydroBOT/reference/join_to_geo.html","id":null,"dir":"Reference","previous_headings":"","what":"Pairs gauge numbers with geographic locations to make an sf — join_to_geo","title":"Pairs gauge numbers with geographic locations to make an sf — join_to_geo","text":"Typically used EWR outputs, anything gauge column gauge numbers characters work.","code":""},{"path":"https://galenholt.github.io/HydroBOT/reference/join_to_geo.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Pairs gauge numbers with geographic locations to make an sf — join_to_geo","text":"","code":"join_to_geo(data_df, spatial_locs, whichcrs = 4283)"},{"path":"https://galenholt.github.io/HydroBOT/reference/join_to_geo.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Pairs gauge numbers with geographic locations to make an sf — join_to_geo","text":"data_df tibble dataframe gauge column gauge numbers characters spatial_locs sf path csv gauge numbers paired lat-long. whichcrs desired crs output. input crs assumed WGS84, EPSG 4326","code":""},{"path":"https://galenholt.github.io/HydroBOT/reference/join_to_geo.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Pairs gauge numbers with geographic locations to make an sf — join_to_geo","text":"sf dataframe gauge locations points geometry","code":""},{"path":"https://galenholt.github.io/HydroBOT/reference/make_causal_plot.html","id":null,"dir":"Reference","previous_headings":"","what":"Builds a causal network plot — make_causal_plot","title":"Builds a causal network plot — make_causal_plot","text":"Takes node edges dfs, along arguments specify attributes (particularly color), return output. Internally, finds network relevant given set nodes (default ), using find_related_nodes, attributes according attribute arguments using causal_colors_general node_plot_atts uses DiagrammeR make plot.","code":""},{"path":"https://galenholt.github.io/HydroBOT/reference/make_causal_plot.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Builds a causal network plot — make_causal_plot","text":"","code":"make_causal_plot(   nodes,   edges,   focalnodes = unique(nodes$Name),   drop_unused_nodes = TRUE,   edge_pal = list(fromtype = \"nationalparkcolors::GeneralGrant\"),   edge_colorgroups = NULL,   edge_colorset = \"fromtype\",   edge_pal_direction = rep(1, length(edge_pal)),   node_pal = list(fromtype = \"nationalparkcolors::GeneralGrant\"),   node_colorgroups = NULL,   node_colorset = \"NodeType\",   node_pal_direction = rep(1, length(node_pal)),   setLimits = NULL,   wrap_names = TRUE,   render = TRUE,   returnnetwork = TRUE,   save = FALSE,   savedir,   savename = NULL )"},{"path":"https://galenholt.github.io/HydroBOT/reference/make_causal_plot.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Builds a causal network plot — make_causal_plot","text":"nodes tibble dataframe defining nodes edges tibble dataframe defining edge relationships focalnodes character vector nodes use find related network (default values Name column nodes df). Uses find_related_nodes build network nodes along upstream downstream nodes. drop_unused_nodes logical, default TRUE, drops nodes connections. FALSE useful keep unconnected nodes want see causally related others. edge_pal named list color palettes color values edges. Currently supports paletteer palettes, vectors colors, single colors. See causal_colors_general edge_colorgroups NULL (default) column name (character) specifying grouping column different color palettes edges. See causal_colors_general edge_colorset column name (character) giving column define edge color. See causal_colors_general edge_pal_direction either 1 (default) -1 (reversed) direction palettes node_pal named list color palettes color values nodes. Currently supports paletteer palettes, vectors colors, single colors. See causal_colors_general node_colorgroups NULL (default) column name (character) specifying grouping column different color palettes nodes. See causal_colors_general node_colorset column name (character) giving column define node color. See causal_colors_general node_pal_direction either 1 (default) -1 (reversed) direction palettes setLimits NULL (default) length-2 numeric vector force limits color scale. wrap_names logical, default TRUE, long node names wrapped multiple lines render logical, default TRUE, network rendered graphics device? returnnetwork logical, default TRUE, graph object produced DiagrammeR returned? save logical, default FALSE, graph saved .png .pdf savedir path directory saving outputs. needed save = TRUE savename character, filename output plots. .pdf .png automatically appended.","code":""},{"path":"https://galenholt.github.io/HydroBOT/reference/make_causal_plot.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Builds a causal network plot — make_causal_plot","text":"causal network DiagrammeR format","code":""},{"path":"https://galenholt.github.io/HydroBOT/reference/make_default_args.html","id":null,"dir":"Reference","previous_headings":"","what":"Helper to allow making the directory structure programatically from the base directory — make_default_args","title":"Helper to allow making the directory structure programatically from the base directory — make_default_args","text":"Helper allow making directory structure programatically base directory","code":""},{"path":"https://galenholt.github.io/HydroBOT/reference/make_default_args.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Helper to allow making the directory structure programatically from the base directory — make_default_args","text":"","code":"make_default_args(arglist)"},{"path":"https://galenholt.github.io/HydroBOT/reference/make_default_args.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Helper to allow making the directory structure programatically from the base directory — make_default_args","text":"arglist list arguments","code":""},{"path":"https://galenholt.github.io/HydroBOT/reference/make_edges.html","id":null,"dir":"Reference","previous_headings":"","what":"Create edges dataframe for causal network or theme aggregation — make_edges","title":"Create edges dataframe for causal network or theme aggregation — make_edges","text":"Takes list causal relationships tables creates pairwise relationships columns specified -pairs. Can geographically filtered gauge planning unit","code":""},{"path":"https://galenholt.github.io/HydroBOT/reference/make_edges.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create edges dataframe for causal network or theme aggregation — make_edges","text":"","code":"make_edges(   dflist,   fromtos,   fromfilter = NULL,   tofilter = NULL,   gaugefilter = NULL,   pufilter = NULL,   gaugeplanmatch = NULL,   extrasave = NULL )"},{"path":"https://galenholt.github.io/HydroBOT/reference/make_edges.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create edges dataframe for causal network or theme aggregation — make_edges","text":"dflist list tibbles dataframes containing matches nodes. Single dataframes may hold multiple relationships. List dataframes relationships different scales fromtos list length-2 character vectors c('', ''), giving column names node categories connect (implies directionality). fromfilter character vector nodes include (subset nodes column. Default NULL includes nodes within column. tofilter character vector nodes include (subset nodes column. Default NULL includes nodes within column gaugefilter character vector gauge numbers include. Default NULL includes gauges pufilter character vector planning units include. Default NULL includes planning units gaugeplanmatch dataframe matches gauges planning units. dataframe passed (default, gaugeplanmatch = NULL), function attempts find dataframe dflist create matching internally. gaugeplanmatch used check consistency gaugefilter pufilter passed, get one passed extrasave columns retain original datasets might desired attributes later. Default NULL retains none.","code":""},{"path":"https://galenholt.github.io/HydroBOT/reference/make_edges.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create edges dataframe for causal network or theme aggregation — make_edges","text":"tibble columns gauge planning_unit_name (included), columns indicating directionality pairings, fromtype totype type node connected, edgeorder column order edges passed (previously used plotting, now deprecated).","code":""},{"path":"https://galenholt.github.io/HydroBOT/reference/make_ewr_consistent.html","id":null,"dir":"Reference","previous_headings":"","what":"handle some different naming conventions — make_ewr_consistent","title":"handle some different naming conventions — make_ewr_consistent","text":"handle different naming conventions","code":""},{"path":"https://galenholt.github.io/HydroBOT/reference/make_ewr_consistent.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"handle some different naming conventions — make_ewr_consistent","text":"","code":"make_ewr_consistent(typearg)"},{"path":"https://galenholt.github.io/HydroBOT/reference/make_ewr_consistent.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"handle some different naming conventions — make_ewr_consistent","text":"typearg list characters EWR types","code":""},{"path":"https://galenholt.github.io/HydroBOT/reference/make_ewr_consistent.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"handle some different naming conventions — make_ewr_consistent","text":"list EWR types standard names","code":""},{"path":"https://galenholt.github.io/HydroBOT/reference/make_nodes.html","id":null,"dir":"Reference","previous_headings":"","what":"Make a node df from the edges df — make_nodes","title":"Make a node df from the edges df — make_nodes","text":"Takes dataframe edges returns nodes nodetype, attach column indicating position along causal sequence","code":""},{"path":"https://galenholt.github.io/HydroBOT/reference/make_nodes.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Make a node df from the edges df — make_nodes","text":"","code":"make_nodes(edgedf, groupers = NULL, typeorder = \"werp\")"},{"path":"https://galenholt.github.io/HydroBOT/reference/make_nodes.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Make a node df from the edges df — make_nodes","text":"edgedf tibble dataframe edges columns, well fromtype totype groupers character vector grouping variables might appear edgedf. Typically used retain separate nodes different planning units gauges typeorder character vector dataframe giving order node types network, werp (default). werp flags use default ranking","code":""},{"path":"https://galenholt.github.io/HydroBOT/reference/make_nodes.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Make a node df from the edges df — make_nodes","text":"tibble columns Name individual node, NodeType group nodes given type, noderoder specifying nodetype causal flow. May also include grouping column(s)","code":""},{"path":"https://galenholt.github.io/HydroBOT/reference/make_output_dir.html","id":null,"dir":"Reference","previous_headings":"","what":"Set up the output directory structure based on parent directory and module at parent_dir/module_output/MODULE_NAME/subdir — make_output_dir","title":"Set up the output directory structure based on parent directory and module at parent_dir/module_output/MODULE_NAME/subdir — make_output_dir","text":"Set output directory structure based parent directory module parent_dir/module_output/MODULE_NAME/subdir","code":""},{"path":"https://galenholt.github.io/HydroBOT/reference/make_output_dir.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Set up the output directory structure based on parent directory and module at parent_dir/module_output/MODULE_NAME/subdir — make_output_dir","text":"","code":"make_output_dir(   parent_dir,   scenarios,   module_name = \"EWR\",   subdir = \"\",   ewr_outtypes = c(\"summary\", \"yearly\") )"},{"path":"https://galenholt.github.io/HydroBOT/reference/make_output_dir.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Set up the output directory structure based on parent directory and module at parent_dir/module_output/MODULE_NAME/subdir — make_output_dir","text":"parent_dir parent directory- typically project, single scenario scenarios names scenarios (character vector) module_name default 'EWR', sets different directories different modules subdir character, default \"\" none, included, makes sub-directory parent_dir/module_output/MODULE_NAME ewr_outtypes character vector, names EWR outputs return. Options include 'summary': outputs summarised period 'yearly': outputs summarised year 'all_events' 'all_successful_events' 'all_interEvents' 'all_successful_interEvents'","code":""},{"path":"https://galenholt.github.io/HydroBOT/reference/make_output_dir.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Set up the output directory structure based on parent directory and module at parent_dir/module_output/MODULE_NAME/subdir — make_output_dir","text":"path output directory","code":""},{"path":"https://galenholt.github.io/HydroBOT/reference/make_pal.html","id":null,"dir":"Reference","previous_headings":"","what":"Function to ensure colors match across plots — make_pal","title":"Function to ensure colors match across plots — make_pal","text":"Function ensure colors match across plots","code":""},{"path":"https://galenholt.github.io/HydroBOT/reference/make_pal.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Function to ensure colors match across plots — make_pal","text":"","code":"make_pal(   levels,   palette,   refvals = NULL,   refcols = NULL,   includeRef = FALSE,   returnUnref = FALSE,   direction = 1 )"},{"path":"https://galenholt.github.io/HydroBOT/reference/make_pal.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Function to ensure colors match across plots — make_pal","text":"levels character vector levels use (possible variable) palette character vector palette name paletteer refvals character vector levels want set manually (typically references) refcols character vector (names hex) colors set manually order matching refvals includeRef logical, defailt FALSE. colors chosen including (TRUE) including (FALSE, default) levels refvals. Typically TRUE sometimes want accentuate level, sometimes . returnUnref logical, default FALSE. return base palette refvals matched palette addition version match refcols (TRUE). works includeRef = TRUE. TRUE, returns list base palette palette matching refcols direction 1 (default) -1 (reverse palette), paletteer::paletteer_c() paletteer::paletteer_d()","code":""},{"path":"https://galenholt.github.io/HydroBOT/reference/make_pal.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Function to ensure colors match across plots — make_pal","text":"typically named character vector colors, unless includeRef = TRUE returnUnref = TRUE. case, list two named color vectors.","code":""},{"path":"https://galenholt.github.io/HydroBOT/reference/make_plot_table.html","id":null,"dir":"Reference","previous_headings":"","what":"Make a table of the aggregations from a plot — make_plot_table","title":"Make a table of the aggregations from a plot — make_plot_table","text":"Make table aggregations plot","code":""},{"path":"https://galenholt.github.io/HydroBOT/reference/make_plot_table.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Make a table of the aggregations from a plot — make_plot_table","text":"","code":"make_plot_table(werp_plot)"},{"path":"https://galenholt.github.io/HydroBOT/reference/make_plot_table.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Make a table of the aggregations from a plot — make_plot_table","text":"werp_plot ggplot object WERP-style data underneath. Needs aggregation sequence columns, column name.","code":""},{"path":"https://galenholt.github.io/HydroBOT/reference/make_plot_table.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Make a table of the aggregations from a plot — make_plot_table","text":"table aggregation step, function used, level aggregation","code":""},{"path":"https://galenholt.github.io/HydroBOT/reference/make_underover.html","id":null,"dir":"Reference","previous_headings":"","what":"Helper for plot_map. Essentially recurses it to do the underlay and overlay lists — make_underover","title":"Helper for plot_map. Essentially recurses it to do the underlay and overlay lists — make_underover","text":"gets run overlays. agnostic whether 'main' plot.","code":""},{"path":"https://galenholt.github.io/HydroBOT/reference/make_underover.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Helper for plot_map. Essentially recurses it to do the underlay and overlay lists — make_underover","text":"","code":"make_underover(   underover_list,   outcome_plot,   sceneorder,   outcome_lab,   maindata,   maindatatype,   maincolorpal,   transoutcome,   setLimits,   base_list,   uotype = \"internal\" )"},{"path":"https://galenholt.github.io/HydroBOT/reference/make_underover.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Helper for plot_map. Essentially recurses it to do the underlay and overlay lists — make_underover","text":"underover_list List layers put either main layer outcome_plot plot, stands layers underover_list added sceneorder Default NULL, otherwise, character factor giving order present scenario levels outcome_lab character, default outcome_col, allows changing label outcome_col (y-axis color/fill) maindata data going primary ('main') layer maindatatype character, 'point' (point, multipoint) 'areal' (polygon, multipolygon) used know main layer uses color ('point') fill ('areal') aes maincolorpal palette main data transoutcome transformation outcome ggplot2::scale_y_continuous() ggplot2::scale_fill_continuous(). Default transoutcome = 'identity' just uses data. common change likely transoutcome = 'log10 setLimits sets user-supplied color/fill limits midpoints maps, heatmaps, networks, y limits plots. Also sets underlay overlay limits consistency. NULL (default) use internally-calculated limits length-1 numeric, sets midpoint, limits stay auto-calculated. V. useful divergent length-2 numeric, sets lower upper limits length-3 numeric, sets limits midpoint c(lower, mid, upper), caveat one limit may ignored (must symmetrical midpoint) base_list 'difference' 'relative', midpoints auto-set 0 1 (respectively) unless otherwise specified . base_list NULL (default) named list arguments baseline_compare(); base_lev comp_fun group_cols plot_data_prep() handles zero_adjust, arguments inferred supported comp_fun 'difference' 'relative', midpoint auto-set 0 1 respectively unless otherwise specified setLimits uotype character, 'overlay', 'underlay', 'internal' (default, item 'underover_list'). used, except compatibility","code":""},{"path":"https://galenholt.github.io/HydroBOT/reference/make_underover.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Helper for plot_map. Essentially recurses it to do the underlay and overlay lists — make_underover","text":"ggplot object composed stacked maps according underover_list","code":""},{"path":"https://galenholt.github.io/HydroBOT/reference/map_ewr_gauges.html","id":null,"dir":"Reference","previous_headings":"","what":"quick map of the gauges in the ewr tool — map_ewr_gauges","title":"quick map of the gauges in the ewr tool — map_ewr_gauges","text":"quick map gauges ewr tool","code":""},{"path":"https://galenholt.github.io/HydroBOT/reference/map_ewr_gauges.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"quick map of the gauges in the ewr tool — map_ewr_gauges","text":"","code":"map_ewr_gauges()"},{"path":"https://galenholt.github.io/HydroBOT/reference/map_ewr_gauges.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"quick map of the gauges in the ewr tool — map_ewr_gauges","text":"ggplot","code":""},{"path":"https://galenholt.github.io/HydroBOT/reference/maxInterevent.html","id":null,"dir":"Reference","previous_headings":"","what":"Get maximum interevent duration of a vector — maxInterevent","title":"Get maximum interevent duration of a vector — maxInterevent","text":"Uses base::rle() get maximum length 0s","code":""},{"path":"https://galenholt.github.io/HydroBOT/reference/maxInterevent.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get maximum interevent duration of a vector — maxInterevent","text":"","code":"maxInterevent(x)"},{"path":"https://galenholt.github.io/HydroBOT/reference/maxInterevent.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get maximum interevent duration of a vector — maxInterevent","text":"x numeric vector","code":""},{"path":"https://galenholt.github.io/HydroBOT/reference/maxInterevent.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get maximum interevent duration of a vector — maxInterevent","text":"numeric scalar maximum run 0s","code":""},{"path":"https://galenholt.github.io/HydroBOT/reference/multi_aggregate.html","id":null,"dir":"Reference","previous_headings":"","what":"Iterative aggregation along theme and spatial dimensions — multi_aggregate","title":"Iterative aggregation along theme and spatial dimensions — multi_aggregate","text":"Wraps spatial_aggregate() theme_aggregate() within loop lists aggregation levels functions apply level. Includes small dataprep cleanup depending arguments output look like","code":""},{"path":"https://galenholt.github.io/HydroBOT/reference/multi_aggregate.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Iterative aggregation along theme and spatial dimensions — multi_aggregate","text":"","code":"multi_aggregate(   dat,   causal_edges = NULL,   groupers = \"scenario\",   group_until = rep(NA, length(groupers)),   aggCols,   aggsequence,   funsequence,   saveintermediate = FALSE,   namehistory = TRUE,   keepAllPolys = FALSE,   failmissing = TRUE,   auto_ewr_PU = FALSE,   pseudo_spatial = NULL )"},{"path":"https://galenholt.github.io/HydroBOT/reference/multi_aggregate.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Iterative aggregation along theme and spatial dimensions — multi_aggregate","text":"dat input dataframe. Must sf aggsequence includes spatial aggregation. Otherwise, theme_aggregate() spatial_aggregate() causal_edges causal links theme levels included aggsequence, though can also include others, ignored. Creates theme grouping groupers general_aggregate(), note grouping columns except theme spatial groupings. automatically added groupers according aggsequence passing general_aggregate(). group_until named list groupers (column names) step retained. Default NA (retain groupers steps). EWR USE, best option group_until = list(SWSDLName = 'sdl_units', planning_unit_name = 'sdl_units', gauge = is_notpoint). groups planning unit gauge planning unit larger spatial grouping happened, dealing issue gauges reporting multiple PUs SDLs. Leaving 'gauge' mathematically safe, since gauge geometry forces grouping, 'gauge' column gets dropped. Step can index, name, function evaluates TRUE FALSE run aggregation sequence. Named list need contain groupers, , persist throughout given NA numeric values longer aggsequence. Vectors length groupers usually work, less-well supported. aggCols expression columns aggregate (data columns). See selectcreator formats aggsequence named list aggregation steps order apply . Entries theme aggregation character vectors- e.g. name = c('from_theme', 'to_theme'). Entries spatial aggregation sf polygon aggregate , e.g. name = sfpolygons length-1 character, e.g. name = \"sfpolygons\". latter requires object available get(\"sfpolygons\"), allows passing characters rather objects. requiring names high list improvements. want able re-run auto-saved metadata params, need names spatial levels match object, e.g. basin: basin. funsequence list aggregation functions apply order apply . list entry can one value, e.g. character bare name, can multiple multiple aggregations done step, e.g. c('ArithmeticMean', 'LimitingFactor'). entries can also lists , useful passing functions arguments, e.g list(wm = ~weighted.mean(., w = area, na.rm = TRUE)). Important: dplyr 1.1, anonymous functions refer data variables (like w = area argument weighted.mean() example), list needs wrapped rlang::quo(), e.g. rlang::quo(list(wm = ~weighted.mean(., w = area, na.rm = TRUE)). can longer mix character forms sub-list (single aggregation step). saveintermediate logical, default FALSE. * FALSE (default): Save final result tibble sf * TRUE: Save every step aggregation tibble sf list namehistory logical, default TRUE. TRUE (default): name aggregated column(s) retain full aggregation history form agglevelN_aggfunctionN_...agglevel1_aggfunction1_originalcolumn. ugly, saves memory says exactly values column . FALSE: aggregation history moved column names new columns define using agg_names_to_cols(). column name(s) become(s) original column name(s) specified aggCols. far cleaner easier analysis (e.g. filtering aggregation functions particular step), increases size dataset meaning values aggregation column interpreted values new columns defining history. keepAllPolys logical, default FALSE. polygons to_geo values dat retained? default FALSE keeps NA polygons cluttering things , TRUE can useful lose , especially later plotting. However, typically best data cleanliness perspective use FALSE use bare set polys underlay plot_outcomes(). failmissing logical, default TRUE: fail requested grouping aggregation columns exist. FALSE, proceed exist silently drop . Similar tidyselect::all_of() vs tidyselect::any_of() tidyselect auto_ewr_PU logical, default FALSE. Auto-detect EWRs enforce appropriate theme spatial scaling related gauges planning units, defined theme_aggregate() spatial_aggregate(). Specifically, TRUE, automatically manages group_until pseudo_spatial arguments. pseudo_spatial character numeric vector giving names indices (column names join ) aggsequence 'psuedo-spatial' aggregation. go one spatial data level another, join aggregation non-spatial dplyr::left_join(). developed EWR situation, incoming data indexed gauges, planning units, sdl units, gauge point geometry, spatial joining planning units sdl appropriate, single gauges affect multiple units. join planning_units sdl_units column names instead spatially, aggregate according units. EWR use, typically best option pseudo_spatial = c('planning_units', 'sdl_units'), grouping sdls pseudo planning units spill sdl boundaries.","code":""},{"path":"https://galenholt.github.io/HydroBOT/reference/multi_aggregate.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Iterative aggregation along theme and spatial dimensions — multi_aggregate","text":"either tibble sf aggregated values final level (saveintermediate = FALSE) list tibbles sfs aggregated values step (saveintermediate = TRUE)","code":""},{"path":"https://galenholt.github.io/HydroBOT/reference/nameclean.html","id":null,"dir":"Reference","previous_headings":"","what":"Helper to sort the names — nameclean","title":"Helper to sort the names — nameclean","text":"Helper sort names","code":""},{"path":"https://galenholt.github.io/HydroBOT/reference/nameclean.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Helper to sort the names — nameclean","text":"","code":"nameclean(charvec)"},{"path":"https://galenholt.github.io/HydroBOT/reference/nameclean.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Helper to sort the names — nameclean","text":"charvec vector names","code":""},{"path":"https://galenholt.github.io/HydroBOT/reference/nameclean.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Helper to sort the names — nameclean","text":"character vector","code":""},{"path":"https://galenholt.github.io/HydroBOT/reference/node_plot_atts.html","id":null,"dir":"Reference","previous_headings":"","what":"Attach attribute columns to node df to define plot — node_plot_atts","title":"Attach attribute columns to node df to define plot — node_plot_atts","text":"function primarily sets attributes related size position. (fontsize, width, height, x, y) well shape tooltips. effectively sets default look structure graph. also needs work- numbers hardcoded, need made relative. possible add attributes (see DiagrammeR documentation), likely also want set (especially height width) functionally (like color)","code":""},{"path":"https://galenholt.github.io/HydroBOT/reference/node_plot_atts.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Attach attribute columns to node df to define plot — node_plot_atts","text":"","code":"node_plot_atts(nodedf)"},{"path":"https://galenholt.github.io/HydroBOT/reference/node_plot_atts.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Attach attribute columns to node df to define plot — node_plot_atts","text":"nodedf tibble, dataframe nodes","code":""},{"path":"https://galenholt.github.io/HydroBOT/reference/node_plot_atts.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Attach attribute columns to node df to define plot — node_plot_atts","text":"tibble nodes new attribute columns needed control look DiagrammeR","code":""},{"path":"https://galenholt.github.io/HydroBOT/reference/oddsratio.html","id":null,"dir":"Reference","previous_headings":"","what":"Odds ratio — oddsratio","title":"Odds ratio — oddsratio","text":"Odds ratio","code":""},{"path":"https://galenholt.github.io/HydroBOT/reference/oddsratio.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Odds ratio — oddsratio","text":"","code":"oddsratio(x, y, add_eps = 0)"},{"path":"https://galenholt.github.io/HydroBOT/reference/oddsratio.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Odds ratio — oddsratio","text":"x data compare y reference data add_eps default 0. epsilon add prevent divide--zero infs. Can 'auto' use half minimum nonzero value. Adjusts zeros ones , nothing else.","code":""},{"path":"https://galenholt.github.io/HydroBOT/reference/oddsratio.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Odds ratio — oddsratio","text":"numeric","code":""},{"path":"https://galenholt.github.io/HydroBOT/reference/parse_aggnum.html","id":null,"dir":"Reference","previous_headings":"","what":"Main function of parse_group_until, finds the index for different ways of specifying group_until — parse_aggnum","title":"Main function of parse_group_until, finds the index for different ways of specifying group_until — parse_aggnum","text":"Main function parse_group_until, finds index different ways specifying group_until","code":""},{"path":"https://galenholt.github.io/HydroBOT/reference/parse_aggnum.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Main function of parse_group_until, finds the index for different ways of specifying group_until — parse_aggnum","text":"","code":"parse_aggnum(x, aggsequence)"},{"path":"https://galenholt.github.io/HydroBOT/reference/parse_aggnum.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Main function of parse_group_until, finds the index for different ways of specifying group_until — parse_aggnum","text":"x one group_until items aggsequence multi_aggregate()","code":""},{"path":"https://galenholt.github.io/HydroBOT/reference/parse_aggnum.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Main function of parse_group_until, finds the index for different ways of specifying group_until — parse_aggnum","text":"numeric index group_until","code":""},{"path":"https://galenholt.github.io/HydroBOT/reference/parse_char.html","id":null,"dir":"Reference","previous_headings":"","what":"Get an all-character version of the aggsequence by parsing entries that are dataframes back to their names — parse_char","title":"Get an all-character version of the aggsequence by parsing entries that are dataframes back to their names — parse_char","text":"Intended used purrr::imap().","code":""},{"path":"https://galenholt.github.io/HydroBOT/reference/parse_char.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get an all-character version of the aggsequence by parsing entries that are dataframes back to their names — parse_char","text":"","code":"parse_char(x, idx)"},{"path":"https://galenholt.github.io/HydroBOT/reference/parse_char.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get an all-character version of the aggsequence by parsing entries that are dataframes back to their names — parse_char","text":"x character vector dataframe, typically one entry aggregation list idx name list item","code":""},{"path":"https://galenholt.github.io/HydroBOT/reference/parse_char.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get an all-character version of the aggsequence by parsing entries that are dataframes back to their names — parse_char","text":"character vector examples tag export purrr::imap(list(ewr_code = c('ewr_code_timing', 'ewr_code'), sdl_units = sdl_units), parse_char)","code":""},{"path":"https://galenholt.github.io/HydroBOT/reference/parse_char_funs.html","id":null,"dir":"Reference","previous_headings":"","what":"Get an all-character version of the funsequence by parsing entries that are lists or quosures to characters — parse_char_funs","title":"Get an all-character version of the funsequence by parsing entries that are lists or quosures to characters — parse_char_funs","text":"Intended used purrr::map().","code":""},{"path":"https://galenholt.github.io/HydroBOT/reference/parse_char_funs.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get an all-character version of the funsequence by parsing entries that are lists or quosures to characters — parse_char_funs","text":"","code":"parse_char_funs(x)"},{"path":"https://galenholt.github.io/HydroBOT/reference/parse_char_funs.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get an all-character version of the funsequence by parsing entries that are lists or quosures to characters — parse_char_funs","text":"x entry funsequence, typically character, list, quosure","code":""},{"path":"https://galenholt.github.io/HydroBOT/reference/parse_char_funs.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get an all-character version of the funsequence by parsing entries that are lists or quosures to characters — parse_char_funs","text":"character vector","code":""},{"path":"https://galenholt.github.io/HydroBOT/reference/parse_geo.html","id":null,"dir":"Reference","previous_headings":"","what":"get character names for geographic data, allowing aggsequences that are only characters. — parse_geo","title":"get character names for geographic data, allowing aggsequences that are only characters. — parse_geo","text":"length-1 entries aggregation sequence turned dataframes. See multi_aggregate() use. Intended used purrr::map() similar.","code":""},{"path":"https://galenholt.github.io/HydroBOT/reference/parse_geo.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"get character names for geographic data, allowing aggsequences that are only characters. — parse_geo","text":"","code":"parse_geo(x)"},{"path":"https://galenholt.github.io/HydroBOT/reference/parse_geo.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"get character names for geographic data, allowing aggsequences that are only characters. — parse_geo","text":"x character vector dataframe, typically one entry aggregation list","code":""},{"path":"https://galenholt.github.io/HydroBOT/reference/parse_geo.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"get character names for geographic data, allowing aggsequences that are only characters. — parse_geo","text":"aggregation sequence, length-1 character vectors attempted get examples tag export purrr::map(list(ewr_code = c('ewr_code_timing', 'ewr_code'), sdl_units = \"sdl_units\"), parse_geo)","code":""},{"path":"https://galenholt.github.io/HydroBOT/reference/parse_group_until.html","id":null,"dir":"Reference","previous_headings":"","what":"Parses group_until into standard form — parse_group_until","title":"Parses group_until into standard form — parse_group_until","text":"Parses group_until standard form","code":""},{"path":"https://galenholt.github.io/HydroBOT/reference/parse_group_until.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Parses group_until into standard form — parse_group_until","text":"","code":"parse_group_until(group_until, groupers, aggsequence)"},{"path":"https://galenholt.github.io/HydroBOT/reference/parse_group_until.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Parses group_until into standard form — parse_group_until","text":"group_until named list groupers (column names) step retained. Default NA (retain groupers steps). EWR USE, best option group_until = list(SWSDLName = 'sdl_units', planning_unit_name = 'sdl_units', gauge = is_notpoint). groups planning unit gauge planning unit larger spatial grouping happened, dealing issue gauges reporting multiple PUs SDLs. Leaving 'gauge' mathematically safe, since gauge geometry forces grouping, 'gauge' column gets dropped. Step can index, name, function evaluates TRUE FALSE run aggregation sequence. Named list need contain groupers, , persist throughout given NA numeric values longer aggsequence. Vectors length groupers usually work, less-well supported. groupers general_aggregate(), note grouping columns except theme spatial groupings. automatically added groupers according aggsequence passing general_aggregate(). aggsequence named list aggregation steps order apply . Entries theme aggregation character vectors- e.g. name = c('from_theme', 'to_theme'). Entries spatial aggregation sf polygon aggregate , e.g. name = sfpolygons length-1 character, e.g. name = \"sfpolygons\". latter requires object available get(\"sfpolygons\"), allows passing characters rather objects. requiring names high list improvements. want able re-run auto-saved metadata params, need names spatial levels match object, e.g. basin: basin.","code":""},{"path":"https://galenholt.github.io/HydroBOT/reference/parse_group_until.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Parses group_until into standard form — parse_group_until","text":"named list group_until groupers numeric index.","code":""},{"path":"https://galenholt.github.io/HydroBOT/reference/planning_units.html","id":null,"dir":"Reference","previous_headings":"","what":"Planning Units for long-term watering plans — planning_units","title":"Planning Units for long-term watering plans — planning_units","text":"Polygons defining planning units. Currently just NSW, sourced MDBA Environmental Assets Functions Database. merged across resource plan areas, allowing split , arbitrary polygons","code":""},{"path":"https://galenholt.github.io/HydroBOT/reference/planning_units.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Planning Units for long-term watering plans — planning_units","text":"","code":"planning_units"},{"path":[]},{"path":"https://galenholt.github.io/HydroBOT/reference/planning_units.html","id":"planning-units-an-sf-object-","dir":"Reference","previous_headings":"","what":"planning_units An sf object:","title":"Planning Units for long-term watering plans — planning_units","text":"LTWPShortName, PlanningUnitName, geometry long-term watering plan area planning unit name matching, extent possible, EWR table. Geometry polygons. columns reference. planning_unit_name PlanningUnitName, matches HydroBOT naming instead EWR naming, allowing easier joining either","code":""},{"path":"https://galenholt.github.io/HydroBOT/reference/planning_units.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"Planning Units for long-term watering plans — planning_units","text":"MDBA Environmental Assets Functions Database","code":""},{"path":"https://galenholt.github.io/HydroBOT/reference/plot_bar.html","id":null,"dir":"Reference","previous_headings":"","what":"Make a bar plot (qualitative x, usually) — plot_bar","title":"Make a bar plot (qualitative x, usually) — plot_bar","text":"main function make standard bar plot ggplot2::geom_col()","code":""},{"path":"https://galenholt.github.io/HydroBOT/reference/plot_bar.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Make a bar plot (qualitative x, usually) — plot_bar","text":"","code":"plot_bar(prepped, x_col, x_lab, outcome_lab, position, transoutcome)"},{"path":"https://galenholt.github.io/HydroBOT/reference/plot_bar.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Make a bar plot (qualitative x, usually) — plot_bar","text":"prepped prepared data plot_data_prep() |>  plot_style_prep() x_col character, name column x-axis. Default 'scenario' x_lab character, default x_col, allows changing x-label outcome_lab character, default outcome_col, allows changing label outcome_col (y-axis color/fill) position character position function, position arguments ggplot2::geom_col() ggplot2::geom_point() (depending plot type), change stacked dodged bars jitter points. Can character, e.g. 'jitter' function, e.g. ggplot2::position_jitter(width = 0.1, height = 0) transoutcome transformation outcome ggplot2::scale_y_continuous() ggplot2::scale_fill_continuous(). Default transoutcome = 'identity' just uses data. common change likely transoutcome = 'log10","code":""},{"path":"https://galenholt.github.io/HydroBOT/reference/plot_bar.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Make a bar plot (qualitative x, usually) — plot_bar","text":"ggplot object","code":""},{"path":"https://galenholt.github.io/HydroBOT/reference/plot_data_prep.html","id":null,"dir":"Reference","previous_headings":"","what":"Some standard data preparation for plotting — plot_data_prep","title":"Some standard data preparation for plotting — plot_data_prep","text":"Handles common data preparation plotting. One goals avoid making million similar datasets- functions keeps changes sandboxed allows consistent error checking formatting.","code":""},{"path":"https://galenholt.github.io/HydroBOT/reference/plot_data_prep.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Some standard data preparation for plotting — plot_data_prep","text":"","code":"plot_data_prep(   data,   outcome_col,   sceneorder = NULL,   base_list = NULL,   zero_adjust = 0,   onlyzeros = FALSE )"},{"path":"https://galenholt.github.io/HydroBOT/reference/plot_data_prep.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Some standard data preparation for plotting — plot_data_prep","text":"data dataframe prep outcome_col character, column name outcome variable. sceneorder character factor giving order present scenario levels. Default NULL uses default ordering. base_list NULL (default) list arguments baseline_compare() zero_adjust numeric (default 0) \"auto\", adjustment data avoid zeros adding zero_adjust abs(data), e.g shifting data away zero, either positively negatively. Zeros shifted randomly. Used avoiding x/0, NaN, Inf relativiszing taking logs, primarily. Auto shifts 0.1*min(abs(data[data != 0])). note adjustment happens baselining (baselining works), baseline reintroduces zeros, re-adjusted . done expectation zeros returned baselining desired, e.g. difference baseline . onlyzeros logical, default FALSE. values adjusted away zero (TRUE) adjust zero values (FALSE)?","code":""},{"path":"https://galenholt.github.io/HydroBOT/reference/plot_data_prep.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Some standard data preparation for plotting — plot_data_prep","text":"list prepped versions data, outcome_col, ylab_append used plot calls","code":""},{"path":"https://galenholt.github.io/HydroBOT/reference/plot_heatmap.html","id":null,"dir":"Reference","previous_headings":"","what":"Make a heatmap — plot_heatmap","title":"Make a heatmap — plot_heatmap","text":"Make heatmap","code":""},{"path":"https://galenholt.github.io/HydroBOT/reference/plot_heatmap.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Make a heatmap — plot_heatmap","text":"","code":"plot_heatmap(   prepped,   x_col,   x_lab,   y_col,   y_lab,   outcome_lab,   transoutcome,   transx,   transy,   contour_arglist,   xtype,   ytype,   setLimits,   base_list )"},{"path":"https://galenholt.github.io/HydroBOT/reference/plot_heatmap.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Make a heatmap — plot_heatmap","text":"prepped prepared data plot_data_prep() |>  plot_style_prep() x_col character, name column x-axis. Default 'scenario' x_lab character, default x_col, allows changing x-label y_col character, default outcome_col. Allows separately specifying y-axis outcome (e.g. maps, heatmaps, networks) y_lab character, default y_col, allows changing y-label outcome_lab character, default outcome_col, allows changing label outcome_col (y-axis color/fill) transoutcome transformation outcome ggplot2::scale_y_continuous() ggplot2::scale_fill_continuous(). Default transoutcome = 'identity' just uses data. common change likely transoutcome = 'log10 transx transformation x axis ggplot2::scale_x_continuous(). Default transx = 'identity' just uses data. common change likely transx = 'log10. transy transformation y-axis, outcome y, transoutcome used. Default 'identity'. Ignored outcome_col y-axis, transoutcome used. contour_arglist default NULL NULL builds heatmap ggplot2::geom_tile(), list(interpolate = TRUE) builds interpolated heatmap ggplot2::geom_raster() interpolate = TRUE list() builds ggplot2::geom_contour() defaults named list names 'interpolate' passes arguments ggplot2::geom_contour() xtype character, 'qual', 'numeric' 'date' (covers several different date types). Determines axes handled ytype character, 'qual', 'numeric' 'date' (covers several different date types). Determines axes handled setLimits sets user-supplied color/fill limits midpoints maps, heatmaps, networks, y limits plots. Also sets underlay overlay limits consistency. NULL (default) use internally-calculated limits length-1 numeric, sets midpoint, limits stay auto-calculated. V. useful divergent length-2 numeric, sets lower upper limits length-3 numeric, sets limits midpoint c(lower, mid, upper), caveat one limit may ignored (must symmetrical midpoint) base_list 'difference' 'relative', midpoints auto-set 0 1 (respectively) unless otherwise specified . base_list NULL (default) named list arguments baseline_compare(); base_lev comp_fun group_cols plot_data_prep() handles zero_adjust, arguments inferred supported comp_fun 'difference' 'relative', midpoint auto-set 0 1 respectively unless otherwise specified setLimits","code":""},{"path":"https://galenholt.github.io/HydroBOT/reference/plot_heatmap.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Make a heatmap — plot_heatmap","text":"ggplot object","code":""},{"path":"https://galenholt.github.io/HydroBOT/reference/plot_map.html","id":null,"dir":"Reference","previous_headings":"","what":"Title — plot_map","title":"Title — plot_map","text":"Plots standard map, potentially underlay overlays, specified underlay_list overlay_list. recursed plot_*_prep() functions transes changes consistent across layers. inherent limitations color/fill points/polygons due masking use multiple color/fill ramps","code":""},{"path":"https://galenholt.github.io/HydroBOT/reference/plot_map.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Title — plot_map","text":"","code":"plot_map(   prepped,   underlay_list,   overlay_list,   map_outlinecolor = \"grey35\",   outcome_lab,   facet_wrapper,   facet_row,   facet_col,   sceneorder,   transoutcome,   setLimits,   base_list )"},{"path":"https://galenholt.github.io/HydroBOT/reference/plot_map.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Title — plot_map","text":"prepped prepared data plot_data_prep() |>  plot_style_prep() underlay_list default NULL, otherwise named list (list named lists multiple underlay levels) arguments plot map underlying main map data. required value either 'underlay' 'underover' (interchangeable), defining data plotted. arguments main plot. Typical examples underlay_list = 'basin' simply plot basin outline underlay_list = list(underlay = 'basin', pal_list = 'azure') , filled underlay_list = list(underlay = outputs_on_sdl_scale, outcome_col = ewr_achieved, pal_list = 'scico::oslo') plot ewr outcomes sdls named palette (e.g. variation color/fill) works main data type- use different palettes underlay fill main data fill, example, can underlay fill (polygons) main data points. overlay_list underlay_list, first item might named \"overlay \"underover\" map_outlinecolor color specification outline filled areas maps. Default 'grey35' seems sf default. NA removes outline. outcome_lab character, default outcome_col, allows changing label outcome_col (y-axis color/fill) facet_wrapper NULL (default) character column use facet_wrap facet_row NULL (default) character facet row. Can '.' one row column-facets facet_col NULL (default) character facet column. Can '.' one column row-facets sceneorder Default NULL, otherwise, character factor giving order present scenario levels transoutcome transformation outcome ggplot2::scale_y_continuous() ggplot2::scale_fill_continuous(). Default transoutcome = 'identity' just uses data. common change likely transoutcome = 'log10 setLimits sets user-supplied color/fill limits midpoints maps, heatmaps, networks, y limits plots. Also sets underlay overlay limits consistency. NULL (default) use internally-calculated limits length-1 numeric, sets midpoint, limits stay auto-calculated. V. useful divergent length-2 numeric, sets lower upper limits length-3 numeric, sets limits midpoint c(lower, mid, upper), caveat one limit may ignored (must symmetrical midpoint) base_list 'difference' 'relative', midpoints auto-set 0 1 (respectively) unless otherwise specified . base_list NULL (default) named list arguments baseline_compare(); base_lev comp_fun group_cols plot_data_prep() handles zero_adjust, arguments inferred supported comp_fun 'difference' 'relative', midpoint auto-set 0 1 respectively unless otherwise specified setLimits","code":""},{"path":"https://galenholt.github.io/HydroBOT/reference/plot_map.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Title — plot_map","text":"ggplot object","code":""},{"path":"https://galenholt.github.io/HydroBOT/reference/plot_numeric.html","id":null,"dir":"Reference","previous_headings":"","what":"Make a plot with a numeric x — plot_numeric","title":"Make a plot with a numeric x — plot_numeric","text":"Often (always) used scenario defined numerically. Uses ggplot2::geom_line() ggplot2::geom_smooth(). Takes smooth_arglist argument control smoother","code":""},{"path":"https://galenholt.github.io/HydroBOT/reference/plot_numeric.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Make a plot with a numeric x — plot_numeric","text":"","code":"plot_numeric(   prepped,   x_col,   x_lab,   outcome_lab,   position,   transoutcome,   transx,   smooth_arglist,   xtype = \"numeric\" )"},{"path":"https://galenholt.github.io/HydroBOT/reference/plot_numeric.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Make a plot with a numeric x — plot_numeric","text":"prepped prepared data plot_data_prep() |>  plot_style_prep() x_col character, name column x-axis. Default 'scenario' x_lab character, default x_col, allows changing x-label outcome_lab character, default outcome_col, allows changing label outcome_col (y-axis color/fill) position character position function, position arguments ggplot2::geom_col() ggplot2::geom_point() (depending plot type), change stacked dodged bars jitter points. Can character, e.g. 'jitter' function, e.g. ggplot2::position_jitter(width = 0.1, height = 0) transoutcome transformation outcome ggplot2::scale_y_continuous() ggplot2::scale_fill_continuous(). Default transoutcome = 'identity' just uses data. common change likely transoutcome = 'log10 transx transformation x axis ggplot2::scale_x_continuous(). Default transx = 'identity' just uses data. common change likely transx = 'log10. smooth_arglist NULL (default) limited list arguments ggplot2::geom_smooth(). NULL x quantitative, defaults straight lines. just list(), uses defaults ggplot2::geom_smooth(). Available arguments: method method.args se linewidth alpha others desired, can develop something general. xtype character, , 'numeric' 'date' (covers several different date types). Dates trans-ed, need identified.","code":""},{"path":"https://galenholt.github.io/HydroBOT/reference/plot_numeric.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Make a plot with a numeric x — plot_numeric","text":"ggplot object","code":""},{"path":"https://galenholt.github.io/HydroBOT/reference/plot_outcomes.html","id":null,"dir":"Reference","previous_headings":"","what":"Standardized plot functions for HydroBOT. — plot_outcomes","title":"Standardized plot functions for HydroBOT. — plot_outcomes","text":"Provides common interface plotting outcome_col, may plotted y fill/color . Handles consistent data preparation steps outcome variable, along error data checking. keeps data arrangement -function controlled consistency accuracy, matter plot type desired. Currently supports lines, points, bars, maps, heatmaps. plots just standardizatons ggplot2::ggplot(), return ggplot objects can tweaked standard ggplot calls. Unlike ggplot, arguments typically go ggplot2::aes() bare names, characters.","code":""},{"path":"https://galenholt.github.io/HydroBOT/reference/plot_outcomes.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Standardized plot functions for HydroBOT. — plot_outcomes","text":"","code":"plot_outcomes(   outdf,   outcome_col,   outcome_lab = outcome_col,   y_col = outcome_col,   y_lab = y_col,   x_col = \"scenario\",   x_lab = x_col,   colorset = \"scenario\",   pal_list = \"scico::berlin\",   pal_direction = rep(1, length(pal_list)),   colorgroups = NULL,   color_lab = ifelse(is.null(colorgroups), colorset, colorgroups),   plot_type = \"2d\",   facet_row = NULL,   facet_col = NULL,   facet_wrapper = NULL,   point_group = NULL,   sceneorder = NULL,   scales = \"fixed\",   transoutcome = \"identity\",   transy = \"identity\",   transx = \"identity\",   zero_adjust = 0,   position = \"stack\",   map_outlinecolor = \"grey35\",   base_list = NULL,   smooth_arglist = NULL,   underlay_list = NULL,   overlay_list = NULL,   contour_arglist = NULL,   setLimits = NULL )"},{"path":"https://galenholt.github.io/HydroBOT/reference/plot_outcomes.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Standardized plot functions for HydroBOT. — plot_outcomes","text":"outdf dataframe outcomes outcome_col character, name outcome column. data interest plotted. data operations plot_data_prep() happen column, plot_style_prep() bases styling . 2d plots, y-axis, maps, heatmaps, network plots, color/fill. entirely possible also use color/fill 2d plots addition y-axis. outcome_lab character, default outcome_col, allows changing label outcome_col (y-axis color/fill) y_col character, default outcome_col. Allows separately specifying y-axis outcome (e.g. maps, heatmaps, networks) y_lab character, default y_col, allows changing y-label x_col character, name column x-axis. Default 'scenario' x_lab character, default x_col, allows changing x-label colorset character, column name use color fill pal_list list palettes defining colors colorset. length colorgroups pal_direction vector length pal_list, either 1 (default) -1 (reversed) direction palettes colorgroups character, column name grouping colorset allow multiple palettes. Default NULL just uses colorset define color color_lab character, default either colorgroups colorset (.null(colorgroups)). Allows changing color legend label plot_type one '2d' (default), 'heatmap', 'contour', 'map', 'network'. Typically, '2d' can inferred. 'heatmap' 'contour' call plot_heatmap, differently. 'network' held future use (use make_causal_plot() interim) facet_row NULL (default) character facet row. Can '.' one row column-facets facet_col NULL (default) character facet column. Can '.' one column row-facets facet_wrapper NULL (default) character column use facet_wrap point_group character, column add additional point groupings , e.g. plotting color environmental group, need separate lines/points environmental objective. sceneorder Default NULL, otherwise, character factor giving order present scenario levels scales facet scales, ggplot2::facet_wrap(). Default scales = 'fixed' holds , common change scales = 'free_y' e.g. gauges different flows. transoutcome transformation outcome ggplot2::scale_y_continuous() ggplot2::scale_fill_continuous(). Default transoutcome = 'identity' just uses data. common change likely transoutcome = 'log10 transy transformation y-axis, outcome y, transoutcome used. Default 'identity'. Ignored outcome_col y-axis, transoutcome used. transx transformation x axis ggplot2::scale_x_continuous(). Default transx = 'identity' just uses data. common change likely transx = 'log10. zero_adjust adjustment zeros plot_data_prep(), useful especially axis trans arguments. See ?plot_data_prep; baselining, go base_list position character position function, position arguments ggplot2::geom_col() ggplot2::geom_point() (depending plot type), change stacked dodged bars jitter points. Can character, e.g. 'jitter' function, e.g. ggplot2::position_jitter(width = 0.1, height = 0) map_outlinecolor color specification outline filled areas maps. Default 'grey35' seems sf default. NA removes outline. base_list NULL (default) named list arguments baseline_compare(); base_lev comp_fun group_cols plot_data_prep() handles zero_adjust, arguments inferred supported comp_fun 'difference' 'relative', midpoint auto-set 0 1 respectively unless otherwise specified setLimits smooth_arglist NULL (default) limited list arguments ggplot2::geom_smooth(). NULL x quantitative, defaults straight lines. just list(), uses defaults ggplot2::geom_smooth(). Available arguments: method method.args se linewidth alpha others desired, can develop something general. underlay_list default NULL, otherwise named list (list named lists multiple underlay levels) arguments plot map underlying main map data. required value either 'underlay' 'underover' (interchangeable), defining data plotted. arguments main plot. Typical examples underlay_list = 'basin' simply plot basin outline underlay_list = list(underlay = 'basin', pal_list = 'azure') , filled underlay_list = list(underlay = outputs_on_sdl_scale, outcome_col = ewr_achieved, pal_list = 'scico::oslo') plot ewr outcomes sdls named palette (e.g. variation color/fill) works main data type- use different palettes underlay fill main data fill, example, can underlay fill (polygons) main data points. overlay_list underlay_list, first item might named \"overlay \"underover\" contour_arglist default NULL NULL builds heatmap ggplot2::geom_tile(), list(interpolate = TRUE) builds interpolated heatmap ggplot2::geom_raster() interpolate = TRUE list() builds ggplot2::geom_contour() defaults named list names 'interpolate' passes arguments ggplot2::geom_contour() setLimits sets user-supplied color/fill limits midpoints maps, heatmaps, networks, y limits plots. Also sets underlay overlay limits consistency. NULL (default) use internally-calculated limits length-1 numeric, sets midpoint, limits stay auto-calculated. V. useful divergent length-2 numeric, sets lower upper limits length-3 numeric, sets limits midpoint c(lower, mid, upper), caveat one limit may ignored (must symmetrical midpoint) base_list 'difference' 'relative', midpoints auto-set 0 1 (respectively) unless otherwise specified .","code":""},{"path":"https://galenholt.github.io/HydroBOT/reference/plot_outcomes.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Standardized plot functions for HydroBOT. — plot_outcomes","text":"ggplot stacked bar plot standard formatting data cleaning","code":""},{"path":"https://galenholt.github.io/HydroBOT/reference/plot_outcomes.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Standardized plot functions for HydroBOT. — plot_outcomes","text":"provide argument drop legend labels purpose- dangerous auto-drop . user can always + theme(legend.position = 'none') returned object. much possible, arguments specific plot types put *_list arguments, NULL (typically default) lists arguments user wants change.","code":""},{"path":"https://galenholt.github.io/HydroBOT/reference/plot_style_prep.html","id":null,"dir":"Reference","previous_headings":"","what":"Some data preparation, checking, and type-finding based on the type of data and the way we want plots to look — plot_style_prep","title":"Some data preparation, checking, and type-finding based on the type of data and the way we want plots to look — plot_style_prep","text":"data preparation, checking, type-finding based type data way want plots look","code":""},{"path":"https://galenholt.github.io/HydroBOT/reference/plot_style_prep.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Some data preparation, checking, and type-finding based on the type of data and the way we want plots to look — plot_style_prep","text":"","code":"plot_style_prep(   prepped,   colorset,   colorgroups,   pal_list,   pal_direction,   transoutcome,   transx,   point_group )"},{"path":"https://galenholt.github.io/HydroBOT/reference/plot_style_prep.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Some data preparation, checking, and type-finding based on the type of data and the way we want plots to look — plot_style_prep","text":"prepped prepped data list returned plot_data_prep() colorset character, column name use color fill colorgroups character, column name grouping colorset allow multiple palettes. Default NULL just uses colorset define color pal_list list palettes defining colors colorset. length colorgroups pal_direction vector length pal_list, either 1 (default) -1 (reversed) direction palettes transoutcome transformation outcome ggplot2::scale_y_continuous() ggplot2::scale_fill_continuous(). Default transoutcome = 'identity' just uses data. common change likely transoutcome = 'log10 transx transformation x axis ggplot2::scale_x_continuous(). Default transx = 'identity' just uses data. common change likely transx = 'log10. point_group character, column add additional point groupings , e.g. plotting color environmental group, need separate lines/points environmental objective.","code":""},{"path":"https://galenholt.github.io/HydroBOT/reference/plot_style_prep.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Some data preparation, checking, and type-finding based on the type of data and the way we want plots to look — plot_style_prep","text":"prepped data list information needed make plots","code":""},{"path":"https://galenholt.github.io/HydroBOT/reference/prep_ewr_output.html","id":null,"dir":"Reference","previous_headings":"","what":"Make EWR results with achievement for ongoing use — prep_ewr_output","title":"Make EWR results with achievement for ongoing use — prep_ewr_output","text":"Make EWR results achievement ongoing use","code":""},{"path":"https://galenholt.github.io/HydroBOT/reference/prep_ewr_output.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Make EWR results with achievement for ongoing use — prep_ewr_output","text":"","code":"prep_ewr_output(   dat,   type = \"achievement\",   year_roll = \"best\",   gaugefilter = NULL,   scenariofilter = NULL,   add_max = ifelse(type == \"achievement\", TRUE, FALSE) )"},{"path":"https://galenholt.github.io/HydroBOT/reference/prep_ewr_output.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Make EWR results with achievement for ongoing use — prep_ewr_output","text":"dat EWR output dataframe (usually gauges scenarios) type read_and_geo(), two special options: 'achievement', calculates EWR achievement 'yearly', 'interevents', calculates interevent values all_interEvents all_successful_interEvents EWR tool, direct options 'summary', 'yearly', 'all_events', 'all_successful_events', 'all_interEvents', 'all_successful_interEvents' year_roll character 'best' number, specific number years check assessment . 'Best' uses 10-year windows possible. 1 uses NSW method. gaugefilter subset gauges, default NULL scenariofilter subset scenarios, default NULL add_max logical, default TRUE type = 'achievement'. Add 'MAX' scenario passes EWRs, usable reference","code":""},{"path":"https://galenholt.github.io/HydroBOT/reference/prep_ewr_output.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Make EWR results with achievement for ongoing use — prep_ewr_output","text":"tibble ewr_achieved","code":""},{"path":"https://galenholt.github.io/HydroBOT/reference/prep_run_save_ewrs.html","id":null,"dir":"Reference","previous_headings":"","what":"Set up, run, and (possibly) save EWR outputs — prep_run_save_ewrs","title":"Set up, run, and (possibly) save EWR outputs — prep_run_save_ewrs","text":"directory setup parsing, runs EWR tool , asked, saves output. output saves, also auto-saves yaml json metadata files parameters needed run part HydroBOT parameters. Scenario metadata prepended, found.","code":""},{"path":"https://galenholt.github.io/HydroBOT/reference/prep_run_save_ewrs.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Set up, run, and (possibly) save EWR outputs — prep_run_save_ewrs","text":"","code":"prep_run_save_ewrs(   hydro_dir,   output_parent_dir,   output_subdir = \"\",   scenarios = NULL,   model_format = \"Standard time-series\",   outputType = \"none\",   returnType = \"none\",   scenarios_from = \"directory\",   file_search = NULL,   fill_missing = FALSE,   extrameta = NULL,   rparallel = FALSE,   retries = 2,   print_runs = FALSE,   url = FALSE )"},{"path":"https://galenholt.github.io/HydroBOT/reference/prep_run_save_ewrs.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Set up, run, and (possibly) save EWR outputs — prep_run_save_ewrs","text":"hydro_dir Directory containing hydrographs. Can outer directory, e.g. hydrographs splits scenario subdirs, can single scenario subdir. output_parent_dir parent directory outputs. Can anything, two typical cases: directory containing hydro_dir, puts module_outputs level hydrographs running batches single scenarios, may hydro_dir, just puts module_outputs hydro_dir output_subdir sub-directory outputs, example want module_output/EWR/V1 module_output/EWR/V2 scenarios NULL (default) named list. NULL- finds scenario names parsing directory names hydro_dir. internal directories, just stays hydro_dir. captures two typical situations discussed output_parent_dir. directories hydro_dir contain hydrological scenarios, use character vector. named list paths files. names become scenario names, paths relative hydro_dir. allows unusual directory structures. model_format see EWR tool. One : 'Standard time-series': (default, among things accepts csv Date column followed gauge columns, _flow _level appended gauge number) 'IQQM - netcdf': development, finds netcdf files hydro_dir. also work hydro_dir .zip netcdfs inside 'ten thousand year': old default (IQQM - NSW 10,000 years), works nearly standard time-series 'Bigmod': previously 'Bigmod - MDBA' 'Source - NSW (res.csv)' outputType list strings character vector defining save disk. One : 'none' (default), save outputs- ignored list others 'summary', 'yearly', 'all_events', 'all_successful_events', 'all_interEvents' 'all_successful_interEvents' returnType list strings character vector defining return active R session. options outputType scenarios_from character, default 'directory' gets scenario names directory names. anything else, gets filenames (safest). Expect additional options future, e.g metadata. file_search character, regex additional limitations filenames. Useful run subset scenarios several files extension defined model_format, hydrographs. fill_missing logical, default FALSE. TRUE, figures expected outputs runs missing. Useful long runs might break. extrameta list, extra information include saved metadata documentation run. Default NULL. rparallel logical, default FALSE. TRUE, parallelises scenarios hydro_dir using furrr. use, install furrr set future::plan() (likely multisession multicore) retries Number retries errors. 0 retries, still runs . Default 2. print_runs logical, default FALSE. true, print set runs done. url logical, default FALSE. TRUE, scenarios needs named list full file paths (URLs). bypasses otherwise automatic prepending hydro_dir onto named scenario list.","code":""},{"path":"https://galenholt.github.io/HydroBOT/reference/prep_run_save_ewrs.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Set up, run, and (possibly) save EWR outputs — prep_run_save_ewrs","text":"list dataframe(s) returnType 'none', otherwise, NULL","code":""},{"path":"https://galenholt.github.io/HydroBOT/reference/prep_run_save_ewrs.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Set up, run, and (possibly) save EWR outputs — prep_run_save_ewrs","text":"far cleanest way work input hydrographs file structure directories defining scenarios, single multiple hydrograph files within . .e. structure mix files different scenarios final directory. structure, using scenarios_from = 'directory' ensure scenarios named uniquely output files also unique mixed scenarios. particularly important parallelising, depends parallelling scenarios. structure retained output structure, making aggregation simpler well. reason establish structure, set scenarios_from = 'file', everythign given unique name, life probably difficult aggregating subsequent processing, requiring work scripts make appropriate comparisons.","code":""},{"path":"https://galenholt.github.io/HydroBOT/reference/pseudo_spatial_joiner.html","id":null,"dir":"Reference","previous_headings":"","what":"Join two spatial dataframes non-spatially — pseudo_spatial_joiner","title":"Join two spatial dataframes non-spatially — pseudo_spatial_joiner","text":"really just left join bypasses geometry, checks.","code":""},{"path":"https://galenholt.github.io/HydroBOT/reference/pseudo_spatial_joiner.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Join two spatial dataframes non-spatially — pseudo_spatial_joiner","text":"","code":"pseudo_spatial_joiner(from_geo, to_geo, prefix)"},{"path":"https://galenholt.github.io/HydroBOT/reference/pseudo_spatial_joiner.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Join two spatial dataframes non-spatially — pseudo_spatial_joiner","text":"from_geo sf input data aggregated to_geo sf aggregate prefix spatial_aggregate, used error-checking","code":""},{"path":"https://galenholt.github.io/HydroBOT/reference/pseudo_spatial_joiner.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Join two spatial dataframes non-spatially — pseudo_spatial_joiner","text":"sf scale to_geo","code":""},{"path":"https://galenholt.github.io/HydroBOT/reference/read_and_agg.html","id":null,"dir":"Reference","previous_headings":"","what":"Read in data and aggregate along theme and spatial dimension — read_and_agg","title":"Read in data and aggregate along theme and spatial dimension — read_and_agg","text":"Allows passing paths data rather objects (though objects work well consistency). Wrapper read_and_geo(), make_edges() multi_aggregate(). Particularly useful want pass parameters strings config anything read , parallelisation (set future::plan()).","code":""},{"path":"https://galenholt.github.io/HydroBOT/reference/read_and_agg.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Read in data and aggregate along theme and spatial dimension — read_and_agg","text":"","code":"read_and_agg(   datpath,   type,   geopath,   causalpath,   groupers = \"scenario\",   group_until = rep(NA, length(groupers)),   prepfun = \"prep_ewr_output\",   prepargs = list(),   aggCols,   aggsequence,   funsequence,   saveintermediate = FALSE,   namehistory = TRUE,   keepAllPolys = FALSE,   failmissing = TRUE,   auto_ewr_PU = FALSE,   pseudo_spatial = NULL,   returnList = TRUE,   savepath = NULL,   extrameta = NULL,   rparallel = FALSE,   par_recursive = TRUE,   savepar = \"combine\",   ... )"},{"path":"https://galenholt.github.io/HydroBOT/reference/read_and_agg.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Read in data and aggregate along theme and spatial dimension — read_and_agg","text":"datpath path indicator data, indicator data data frame. Currently needs EWR (ewrpath argument read_and_geo()), left general future type character, grep files choose. special case 'everything' gets files geopath sf object geographic locations matching column data, path csv gauge locations lat/long (assumes BOM currently) shapefile causalpath path causal relationships .rds file causal network list object name groupers general_aggregate(), note grouping columns except theme spatial groupings. automatically added groupers according aggsequence passing general_aggregate(). group_until named list groupers (column names) step retained. Default NA (retain groupers steps). EWR USE, best option group_until = list(SWSDLName = 'sdl_units', planning_unit_name = 'sdl_units', gauge = is_notpoint). groups planning unit gauge planning unit larger spatial grouping happened, dealing issue gauges reporting multiple PUs SDLs. Leaving 'gauge' mathematically safe, since gauge geometry forces grouping, 'gauge' column gets dropped. Step can index, name, function evaluates TRUE FALSE run aggregation sequence. Named list need contain groupers, , persist throughout given NA numeric values longer aggsequence. Vectors length groupers usually work, less-well supported. prepfun function post-read pre-aggregation preparation module data. mutates go. data transformation needed, use identity(). default generality, given common use EWR tool, defaults EWR tool included HydroBOT (prep_ewr_output() default ). prepargs list arguments prepfun. e.g. list(type = 'achievement', add_max = FALSE). Setting prepargs = list(type = achievement') type = 'yearly' better (general) way declare processing. aggCols expression columns aggregate (data columns). See selectcreator formats aggsequence named list aggregation steps order apply . Entries theme aggregation character vectors- e.g. name = c('from_theme', 'to_theme'). Entries spatial aggregation sf polygon aggregate , e.g. name = sfpolygons length-1 character, e.g. name = \"sfpolygons\". latter requires object available get(\"sfpolygons\"), allows passing characters rather objects. requiring names high list improvements. want able re-run auto-saved metadata params, need names spatial levels match object, e.g. basin: basin. funsequence list aggregation functions apply order apply . list entry can one value, e.g. character bare name, can multiple multiple aggregations done step, e.g. c('ArithmeticMean', 'LimitingFactor'). entries can also lists , useful passing functions arguments, e.g list(wm = ~weighted.mean(., w = area, na.rm = TRUE)). Important: dplyr 1.1, anonymous functions refer data variables (like w = area argument weighted.mean() example), list needs wrapped rlang::quo(), e.g. rlang::quo(list(wm = ~weighted.mean(., w = area, na.rm = TRUE)). can longer mix character forms sub-list (single aggregation step). saveintermediate logical, default FALSE. * FALSE (default): Save final result tibble sf * TRUE: Save every step aggregation tibble sf list namehistory logical, default TRUE. TRUE (default): name aggregated column(s) retain full aggregation history form agglevelN_aggfunctionN_...agglevel1_aggfunction1_originalcolumn. ugly, saves memory says exactly values column . FALSE: aggregation history moved column names new columns define using agg_names_to_cols(). column name(s) become(s) original column name(s) specified aggCols. far cleaner easier analysis (e.g. filtering aggregation functions particular step), increases size dataset meaning values aggregation column interpreted values new columns defining history. keepAllPolys logical, default FALSE. polygons to_geo values dat retained? default FALSE keeps NA polygons cluttering things , TRUE can useful lose , especially later plotting. However, typically best data cleanliness perspective use FALSE use bare set polys underlay plot_outcomes(). failmissing logical, default TRUE: fail requested grouping aggregation columns exist. FALSE, proceed exist silently drop . Similar tidyselect::all_of() vs tidyselect::any_of() tidyselect auto_ewr_PU logical, default FALSE. Auto-detect EWRs enforce appropriate theme spatial scaling related gauges planning units, defined theme_aggregate() spatial_aggregate(). Specifically, TRUE, automatically manages group_until pseudo_spatial arguments. pseudo_spatial character numeric vector giving names indices (column names join ) aggsequence 'psuedo-spatial' aggregation. go one spatial data level another, join aggregation non-spatial dplyr::left_join(). developed EWR situation, incoming data indexed gauges, planning units, sdl units, gauge point geometry, spatial joining planning units sdl appropriate, single gauges affect multiple units. join planning_units sdl_units column names instead spatially, aggregate according units. EWR use, typically best option pseudo_spatial = c('planning_units', 'sdl_units'), grouping sdls pseudo planning units spill sdl boundaries. returnList default TRUE, whether return output current session savepath default NULL, path save output . Note names output rds file directly 'type_aggregated.rds', path include directory structure.  NULL, save. savepath = NULL returnList = FALSE, function errors avoid wasting resources. extrameta list, extra information include saved metadata documentation run. Default NULL. rparallel logical, default FALSE. TRUE, parallelises scenarios hydro_dir using furrr. use, install furrr set future::plan() (likely multisession multicore) par_recursive logical, default TRUE. parallel, use innermost level directory containing EWR outputs (TRUE) next level datpath (FALSE) savepar 'combine' (default) ''. parallel scenarios, combine output (default) save scenario's aggregation separately ('') ... passed read_and_geo(), primarily gaugefilter, scenariofilter.","code":""},{"path":"https://galenholt.github.io/HydroBOT/reference/read_and_agg.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Read in data and aggregate along theme and spatial dimension — read_and_agg","text":"either tibble sf aggregated values final level (saveintermediate = FALSE) list tibbles sfs aggregated values step (saveintermediate = TRUE)","code":""},{"path":"https://galenholt.github.io/HydroBOT/reference/read_and_geo.html","id":null,"dir":"Reference","previous_headings":"","what":"Prepare ewr results from the EWR tool for use in aggregation — read_and_geo","title":"Prepare ewr results from the EWR tool for use in aggregation — read_and_geo","text":"reads EWR results given path type (summary annual), pairs geographic information","code":""},{"path":"https://galenholt.github.io/HydroBOT/reference/read_and_geo.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Prepare ewr results from the EWR tool for use in aggregation — read_and_geo","text":"","code":"read_and_geo(datapath, type, geopath, whichcrs = 4283, ...)"},{"path":"https://galenholt.github.io/HydroBOT/reference/read_and_geo.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Prepare ewr results from the EWR tool for use in aggregation — read_and_geo","text":"datapath path module results (Often EWR outputs HydroBOT modifications format) type character, grep files choose. special case 'everything' gets files geopath sf object geographic locations matching column data, path csv gauge locations lat/long (assumes BOM currently) shapefile whichcrs desired crs output ... passes gaugefilter, scenariofilter get_module_output(). Particularly useful processing data time (e.g. parallel)","code":""},{"path":"https://galenholt.github.io/HydroBOT/reference/read_and_geo.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Prepare ewr results from the EWR tool for use in aggregation — read_and_geo","text":"sf dataframe desired outputs including scenario names gauge polygon locations POINT, POLYGON, MULTIPOLYGON geometry. Primary purpose prepare data send multi_aggregate()","code":""},{"path":"https://galenholt.github.io/HydroBOT/reference/read_hydro.html","id":null,"dir":"Reference","previous_headings":"","what":"Wrapper to read hydrographs into R — read_hydro","title":"Wrapper to read hydrographs into R — read_hydro","text":"Wrapper read hydrographs R","code":""},{"path":"https://galenholt.github.io/HydroBOT/reference/read_hydro.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Wrapper to read hydrographs into R — read_hydro","text":"","code":"read_hydro(   hydropath,   scenariofilter = NULL,   long = TRUE,   format = \"csv\",   gaugemap = \"iqqm\" )"},{"path":"https://galenholt.github.io/HydroBOT/reference/read_hydro.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Wrapper to read hydrographs into R — read_hydro","text":"hydropath path hydrographs scenariofilter character vector scenario names include. Default NULL includes long logical, default TRUE. want data long (column gauge number) wide (FALSE, gauge numbers columns) format character, default 'csv'. Format hydrographs, determines reading function gets called. options include 'nc' netcdfs. gaugemap mapping gauges nodes. Default 'iqqm' gets EWR tool, otherwise, dataframe columns 'node' 'gauge'","code":""},{"path":"https://galenholt.github.io/HydroBOT/reference/read_hydro.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Wrapper to read hydrographs into R — read_hydro","text":"tibble hydrographs","code":""},{"path":"https://galenholt.github.io/HydroBOT/reference/read_hydro_csv.html","id":null,"dir":"Reference","previous_headings":"","what":"Read csv hydrographs in the standard directory structure — read_hydro_csv","title":"Read csv hydrographs in the standard directory structure — read_hydro_csv","text":"Uses machinery find_scenario_paths get paths names hydrographs, read , name .","code":""},{"path":"https://galenholt.github.io/HydroBOT/reference/read_hydro_csv.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Read csv hydrographs in the standard directory structure — read_hydro_csv","text":"","code":"read_hydro_csv(hydropath, scenariofilter, long)"},{"path":"https://galenholt.github.io/HydroBOT/reference/read_hydro_csv.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Read csv hydrographs in the standard directory structure — read_hydro_csv","text":"hydropath path hydrographs scenariofilter character vector scenario names include. Default NULL includes long logical, default TRUE. want data long (column gauge number) wide (FALSE, gauge numbers columns)","code":""},{"path":"https://galenholt.github.io/HydroBOT/reference/read_hydro_csv.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Read csv hydrographs in the standard directory structure — read_hydro_csv","text":"tibble hydrographs","code":""},{"path":"https://galenholt.github.io/HydroBOT/reference/read_hydro_nc.html","id":null,"dir":"Reference","previous_headings":"","what":"Read netcdf hydrographs in the standard directory structure — read_hydro_nc","title":"Read netcdf hydrographs in the standard directory structure — read_hydro_nc","text":"Uses machinery find_scenario_paths get paths names hydrographs, read , name .","code":""},{"path":"https://galenholt.github.io/HydroBOT/reference/read_hydro_nc.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Read netcdf hydrographs in the standard directory structure — read_hydro_nc","text":"","code":"read_hydro_nc(hydropath, scenariofilter, long, gaugemap)"},{"path":"https://galenholt.github.io/HydroBOT/reference/read_hydro_nc.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Read netcdf hydrographs in the standard directory structure — read_hydro_nc","text":"hydropath path hydrographs scenariofilter character vector scenario names include. Default NULL includes long logical, default TRUE. want data long (column gauge number) wide (FALSE, gauge numbers columns) gaugemap mapping gauges nodes. Default 'iqqm' gets EWR tool, otherwise, dataframe columns 'node' 'gauge'","code":""},{"path":"https://galenholt.github.io/HydroBOT/reference/read_hydro_nc.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Read netcdf hydrographs in the standard directory structure — read_hydro_nc","text":"tibble hydrographs","code":""},{"path":"https://galenholt.github.io/HydroBOT/reference/relative.html","id":null,"dir":"Reference","previous_headings":"","what":"Division (relative comparison) — relative","title":"Division (relative comparison) — relative","text":"Easily-callable wrapper /, ability avoid divide--0","code":""},{"path":"https://galenholt.github.io/HydroBOT/reference/relative.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Division (relative comparison) — relative","text":"","code":"relative(x, y, add_eps = 0)"},{"path":"https://galenholt.github.io/HydroBOT/reference/relative.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Division (relative comparison) — relative","text":"x data compare y reference data add_eps default 0. epsilon add prevent divide--zero infs. Can 'auto' use half minimum nonzero value","code":""},{"path":"https://galenholt.github.io/HydroBOT/reference/relative.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Division (relative comparison) — relative","text":"numeric, /","code":""},{"path":"https://galenholt.github.io/HydroBOT/reference/resource_plan_areas.html","id":null,"dir":"Reference","previous_headings":"","what":"Resource plan areas — resource_plan_areas","title":"Resource plan areas — resource_plan_areas","text":"Polygons defining boundaries resource plan areas. Sourced MDBA data website, direct link given . Polygons slightly simplified (reduced vertices) save size.","code":""},{"path":"https://galenholt.github.io/HydroBOT/reference/resource_plan_areas.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Resource plan areas — resource_plan_areas","text":"","code":"resource_plan_areas"},{"path":[]},{"path":"https://galenholt.github.io/HydroBOT/reference/resource_plan_areas.html","id":"resource-plan-areas-an-sf-object-","dir":"Reference","previous_headings":"","what":"resource_plan_areas An sf object:","title":"Resource plan areas — resource_plan_areas","text":"SWWRPANAME, SWWRPACODE Name code resource plan area STATE State","code":""},{"path":"https://galenholt.github.io/HydroBOT/reference/resource_plan_areas.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"Resource plan areas — resource_plan_areas","text":"https://data.gov.au/data/dataset/7b0c274f-7f12-4062-9e54-5b8227ca20c4/resource/8369c483-975c-4f54-8eda-a6fbd0ea89ad/download/sworkingadhocjobsp3827dataoutputsupdate-april-2019sw-wrpasurface-water-water-resource-plan-areas.zip","code":""},{"path":"https://galenholt.github.io/HydroBOT/reference/roll_frequency.html","id":null,"dir":"Reference","previous_headings":"","what":"Helper to get the frequency of occurrence without clogging up the mutates — roll_frequency","title":"Helper to get the frequency of occurrence without clogging up the mutates — roll_frequency","text":"Helper get frequency occurrence without clogging mutates","code":""},{"path":"https://galenholt.github.io/HydroBOT/reference/roll_frequency.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Helper to get the frequency of occurrence without clogging up the mutates — roll_frequency","text":"","code":"roll_frequency(x, year_roll, pad_initial = FALSE, na.rm = FALSE)"},{"path":"https://galenholt.github.io/HydroBOT/reference/roll_frequency.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Helper to get the frequency of occurrence without clogging up the mutates — roll_frequency","text":"x vector calculate rolling frequencies year_roll window size roll pad_initial Allow calculating values first years < year_roll; roll year_roll possible, otherwise much possible. Note makes 1:year_roll entries less smoothed. na.rm default FALSE, na action sums lags- TRUE tempting, can cause fails high thresholds actually know whether met, FALSE appropriate (keeps intermediates NA).","code":""},{"path":"https://galenholt.github.io/HydroBOT/reference/roll_frequency.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Helper to get the frequency of occurrence without clogging up the mutates — roll_frequency","text":"numeric vector","code":""},{"path":"https://galenholt.github.io/HydroBOT/reference/roll_interevent.html","id":null,"dir":"Reference","previous_headings":"","what":"Helper to get the rolling maximum interevent duration without clogging up the mutates — roll_interevent","title":"Helper to get the rolling maximum interevent duration without clogging up the mutates — roll_interevent","text":"Helper get rolling maximum interevent duration without clogging mutates","code":""},{"path":"https://galenholt.github.io/HydroBOT/reference/roll_interevent.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Helper to get the rolling maximum interevent duration without clogging up the mutates — roll_interevent","text":"","code":"roll_interevent(x, year_roll, pad_initial = FALSE)"},{"path":"https://galenholt.github.io/HydroBOT/reference/roll_interevent.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Helper to get the rolling maximum interevent duration without clogging up the mutates — roll_interevent","text":"x vector calculate rolling interevents year_roll window size roll pad_initial Allow calculating values first years < year_roll; roll year_roll possible, otherwise much possible. Note makes 1:year_roll entries less smoothed.","code":""},{"path":"https://galenholt.github.io/HydroBOT/reference/roll_interevent.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Helper to get the rolling maximum interevent duration without clogging up the mutates — roll_interevent","text":"numeric vector","code":""},{"path":"https://galenholt.github.io/HydroBOT/reference/run_hydrobot_params.html","id":null,"dir":"Reference","previous_headings":"","what":"Run HydroBOT through the aggregation step with a file of yaml parameters or passing in yaml as characters. — run_hydrobot_params","title":"Run HydroBOT through the aggregation step with a file of yaml parameters or passing in yaml as characters. — run_hydrobot_params","text":"goal make scripting easier, able change single simple parameters (e.g. directory) command line workflows. Needs lists top-level ewr aggregation items. lists items named function arguments prep_run_save_ewrs() read_and_agg(), respectively.","code":""},{"path":"https://galenholt.github.io/HydroBOT/reference/run_hydrobot_params.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Run HydroBOT through the aggregation step with a file of yaml parameters or passing in yaml as characters. — run_hydrobot_params","text":"","code":"run_hydrobot_params(   yamlpath = NULL,   passed_args = NULL,   list_args = NULL,   defaults = system.file(\"yml/default_params.yml\", package = \"HydroBOT\") )"},{"path":"https://galenholt.github.io/HydroBOT/reference/run_hydrobot_params.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Run HydroBOT through the aggregation step with a file of yaml parameters or passing in yaml as characters. — run_hydrobot_params","text":"yamlpath character, path yaml file parameters. needs contain values parameters wish modify defaults. want able auto-run saved param metadata, names spatial agg levels need match objects, e.g. basin: basin passed_args character, yaml format, e.g. \"\"scenario_dir: 'project_dir/hydrographs'\". Possible pass one, complicated get yaml right. Suggest case modifying params.yml list_args list arguments. Typically come parameterised quarto notebook, pre-parses yaml list, also list(ewr = list(arg1 = x), aggregation = list(arg1 = y)) defaults character, path default set yaml parameters, yamlpath file passed_args need include modified","code":""},{"path":"https://galenholt.github.io/HydroBOT/reference/run_hydrobot_params.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Run HydroBOT through the aggregation step with a file of yaml parameters or passing in yaml as characters. — run_hydrobot_params","text":"runs HydroBOT, returns NULL invisibly, aggregated output params aggReturn: TRUE","code":""},{"path":"https://galenholt.github.io/HydroBOT/reference/safe_imap.html","id":null,"dir":"Reference","previous_headings":"","what":"A wrapper for purrr::imap() and furrr::future_imap() that bypasses errors and potentially retries them — safe_imap","title":"A wrapper for purrr::imap() and furrr::future_imap() that bypasses errors and potentially retries them — safe_imap","text":"Uses purrr::safely() unpacks results errors. Also useful debugging breakpoint","code":""},{"path":"https://galenholt.github.io/HydroBOT/reference/safe_imap.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"A wrapper for purrr::imap() and furrr::future_imap() that bypasses errors and potentially retries them — safe_imap","text":"","code":"safe_imap(.x, .f, ..., retries = 0, parallel = FALSE)"},{"path":"https://galenholt.github.io/HydroBOT/reference/safe_imap.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"A wrapper for purrr::imap() and furrr::future_imap() that bypasses errors and potentially retries them — safe_imap","text":".x object iterate , purrr::imap() .f function, purrr::imap() ... additional arguments .f, purrr::imap() retries Number times retry errors. Default 0 (just try ). Retries make sense errors intermittent reason (network connectivity, etc) parallel Run parallel furrr::future_imap() (TRUE) sequentially purrr::imap() (FALSE, default)","code":""},{"path":"https://galenholt.github.io/HydroBOT/reference/safe_imap.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"A wrapper for purrr::imap() and furrr::future_imap() that bypasses errors and potentially retries them — safe_imap","text":"vector length .x","code":""},{"path":"https://galenholt.github.io/HydroBOT/reference/safe_imap.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"A wrapper for purrr::imap() and furrr::future_imap() that bypasses errors and potentially retries them — safe_imap","text":"","code":"safe_imap(as.list(1:10) |> setNames(letters[1:10]),                   \\(x, y) ifelse(sample(c(1,2), 1) == 1,                               stop(), paste(x, y)),                   retries = 10) |>  unlist() #>  [1] \"1 a\"  \"2 b\"  \"3 c\"  \"4 d\"  \"5 e\"  \"6 f\"  \"7 g\"  \"8 h\"  \"9 i\"  \"10 j\""},{"path":"https://galenholt.github.io/HydroBOT/reference/scenario_names_from_hydro.html","id":null,"dir":"Reference","previous_headings":"","what":"Used to auto-acquire scenario names from the hydrograph directory — scenario_names_from_hydro","title":"Used to auto-acquire scenario names from the hydrograph directory — scenario_names_from_hydro","text":"DEPRECATED, used old prep_run_save_ewrs","code":""},{"path":"https://galenholt.github.io/HydroBOT/reference/scenario_names_from_hydro.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Used to auto-acquire scenario names from the hydrograph directory — scenario_names_from_hydro","text":"","code":"scenario_names_from_hydro(hydro_dir)"},{"path":"https://galenholt.github.io/HydroBOT/reference/scenario_names_from_hydro.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Used to auto-acquire scenario names from the hydrograph directory — scenario_names_from_hydro","text":"hydro_dir path hydrograph directory. Can outer directory , potentially single scenario","code":""},{"path":"https://galenholt.github.io/HydroBOT/reference/scenario_names_from_hydro.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Used to auto-acquire scenario names from the hydrograph directory — scenario_names_from_hydro","text":"character vector scenario names","code":""},{"path":"https://galenholt.github.io/HydroBOT/reference/sdl_units.html","id":null,"dir":"Reference","previous_headings":"","what":"Sustainable diversion limits units — sdl_units","title":"Sustainable diversion limits units — sdl_units","text":"Polygons defining boundaries SDL units. Sourced MDBA data website, direct link given . Polygons slightly simplified (reduced vertices) save size.","code":""},{"path":"https://galenholt.github.io/HydroBOT/reference/sdl_units.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Sustainable diversion limits units — sdl_units","text":"","code":"sdl_units"},{"path":[]},{"path":"https://galenholt.github.io/HydroBOT/reference/sdl_units.html","id":"sd-units-an-sf-object-","dir":"Reference","previous_headings":"","what":"sd_units An sf object:","title":"Sustainable diversion limits units — sdl_units","text":"SWSDLID, SWSDLName ID name SDL unit StateID State","code":""},{"path":"https://galenholt.github.io/HydroBOT/reference/sdl_units.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"Sustainable diversion limits units — sdl_units","text":"https://data.gov.au/data/dataset/4afa3227-8557-4bb6-944a-6494b28ae160/resource/988ae947-f4dc-4f75-9773-536df71b03ad/download/sworkingadhocjobsp3827dataoutputsupdate-january-2019surface-water-sdl-resource-units.zip","code":""},{"path":"https://galenholt.github.io/HydroBOT/reference/selectcreator.html","id":null,"dir":"Reference","previous_headings":"","what":"Helper to handle different ways we might choose columns — selectcreator","title":"Helper to handle different ways we might choose columns — selectcreator","text":"Tidyselect robust way selecting columns, often need selection indirectly- ie pass selecting argument outer function. number ways , reasonably robust general, relying using tidyselect . Allows passing character vectors, bare names, tidyselect syntax, provided function called right place call stack","code":""},{"path":"https://galenholt.github.io/HydroBOT/reference/selectcreator.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Helper to handle different ways we might choose columns — selectcreator","text":"","code":"selectcreator(selectvals, data, failmissing = TRUE)"},{"path":"https://galenholt.github.io/HydroBOT/reference/selectcreator.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Helper to handle different ways we might choose columns — selectcreator","text":"selectvals selection columns. Can character, bare names, tidyselect syntax, e.g. tidyselect::starts_with(). tidyselect, can include objects, need !!. example, prefix = 'ABC', select columns starting prefix, call selectvals = tidyselect::starts_with(!!prefix) data tibble dataframe find columns failmissing logical, default TRUE: fail requested grouping aggregation columns exist. FALSE, proceed exist silently drop ","code":""},{"path":"https://galenholt.github.io/HydroBOT/reference/selectcreator.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Helper to handle different ways we might choose columns — selectcreator","text":"character vector column names. intention use dplyr::group_by select dplyr::select(dplyr::across({{output}})). underlying eval_select returns named integer vector giving column indices, return names use indices may stable throughout calling function(s)","code":""},{"path":"https://galenholt.github.io/HydroBOT/reference/separate_ewr_codes.html","id":null,"dir":"Reference","previous_headings":"","what":"Parser for EWR codes into the main code and the extra bits (called 'timing' for some reason) — separate_ewr_codes","title":"Parser for EWR codes into the main code and the extra bits (called 'timing' for some reason) — separate_ewr_codes","text":"allows keeping whole ewr table, EWR outputs, causal networks matched standardized parsing.","code":""},{"path":"https://galenholt.github.io/HydroBOT/reference/separate_ewr_codes.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Parser for EWR codes into the main code and the extra bits (called 'timing' for some reason) — separate_ewr_codes","text":"","code":"separate_ewr_codes(df)"},{"path":"https://galenholt.github.io/HydroBOT/reference/separate_ewr_codes.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Parser for EWR codes into the main code and the extra bits (called 'timing' for some reason) — separate_ewr_codes","text":"df dataframe ewr_code column raw ewr names (e.g. EWR outputs, causal mappings)","code":""},{"path":"https://galenholt.github.io/HydroBOT/reference/separate_ewr_codes.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Parser for EWR codes into the main code and the extra bits (called 'timing' for some reason) — separate_ewr_codes","text":"tibble clean ewr_code column ewr_code_timing column extra stuff","code":""},{"path":"https://galenholt.github.io/HydroBOT/reference/spatial_aggregate.html","id":null,"dir":"Reference","previous_headings":"","what":"Aggregate along spatial dimension — spatial_aggregate","title":"Aggregate along spatial dimension — spatial_aggregate","text":"Takes geographic data (points polygons), aggregates polygons, retaining theme-level information. function sets data specific prep way spatial dimension works, wraps general_aggregate(). Many arguments just passed general aggregate.","code":""},{"path":"https://galenholt.github.io/HydroBOT/reference/spatial_aggregate.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Aggregate along spatial dimension — spatial_aggregate","text":"","code":"spatial_aggregate(   dat,   to_geo,   groupers,   aggCols,   funlist,   ...,   whichcrs = sf::st_crs(to_geo),   keepAllPolys = FALSE,   failmissing = TRUE,   prefix = \"spatial_\",   joinby = \"spatial\",   auto_ewr_PU = FALSE )"},{"path":"https://galenholt.github.io/HydroBOT/reference/spatial_aggregate.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Aggregate along spatial dimension — spatial_aggregate","text":"dat sf values aggregate necessary non-spatial grouping information (e.g. scenario, theme) to_geo sf polygon multipolygon provides desired spatial level group . uses intersection sf::st_intersection(), dat to_geo polygons, nested. groupers general_aggregate(), note grouping columns except polygons to_geo, automatically added groupers passing general_aggregate(). aggCols expression columns aggregate (data columns). See selectcreator formats funlist list functions arguments used aggregate data. See functionlister creation many cases. situation bare anonymous function, e.g. ~mean(., na.rm = T) supported need name. Use named list using anonymous functions, e.g. list(mean = ~mean(., na.rm = T)). using functions data-variable argument, e.g. weighted.mean column weights, now (dplyr 1.1) workarounds. One option specified function argument, function can just go bare name anonymous. specified elsewhere, can wrapped rlang::quo(), e.g. agglist <- rlang::quo(list(mean = mean, wm = ~weighted.mean(., weight_column_name, na.rm = T))). , now internal workaround add seems stable may cause unforeseen issues. workaround also allows building custom aggregation functions (-anonymous) data-variable argument either exposed hardcoded (see SpatialWeightedMean()). error checks names work quosures, make sure name list using rlang::quo(). ... arguments passed aggregation functions. limited, work data arguments conditions. Almost always better specify explicitly building funlist, works OK simple functions, e.g. passing na.rm = TRUE mean whichcrs desired coordinate reference system, easiest just numeric EPSG code, full crs definition. See sf::st_crs() keepAllPolys logical, default FALSE. polygons to_geo values dat retained? default FALSE keeps NA polygons cluttering things , TRUE can useful lose , especially later plotting. However, typically best data cleanliness perspective use FALSE use bare set polys underlay plot_outcomes(). failmissing logical, default TRUE: fail requested grouping aggregation columns exist. FALSE, proceed exist silently drop . Similar tidyselect::all_of() vs tidyselect::any_of() tidyselect prefix character, differs general_aggregate() default 'spatial_' instead 'agg_'. joinby character, default 'spatial' performs expected spatial join using geometry, 'nonspatial' performs dplyr::left_join() common column names, typically result calling multi_aggregate() pseudo_spatial = 'planning_units'. auto_ewr_PU logical, default FALSE. TRUE, automatically infers whether EWR dataset undergoing gauge sdl planning unit aggregation. , joins data non-spatially (sets joinby = 'nonspatial'). preferred solution use joinby spatial_aggregate() pseudo_spatial multi_aggregate(). none solutions happen, though, aborts prevent incorrectly spatial joining gauges planning units.","code":""},{"path":"https://galenholt.github.io/HydroBOT/reference/spatial_aggregate.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Aggregate along spatial dimension — spatial_aggregate","text":"sf columns grouping variables aggregated polygons to_geo retaining desired theme-level information","code":""},{"path":"https://galenholt.github.io/HydroBOT/reference/spatial_joiner.html","id":null,"dir":"Reference","previous_headings":"","what":"Joins spatial from and to sf objects with needed data prep for the aggregate functions — spatial_joiner","title":"Joins spatial from and to sf objects with needed data prep for the aggregate functions — spatial_joiner","text":"ensures polygons crs, valid, optimises sf::st_intersection, calculates area column future use, drops geometry retaining polyID from_geo grouper aggregation later re-joining geometry","code":""},{"path":"https://galenholt.github.io/HydroBOT/reference/spatial_joiner.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Joins spatial from and to sf objects with needed data prep for the aggregate functions — spatial_joiner","text":"","code":"spatial_joiner(from_geo, to_geo, whichcrs)"},{"path":"https://galenholt.github.io/HydroBOT/reference/spatial_joiner.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Joins spatial from and to sf objects with needed data prep for the aggregate functions — spatial_joiner","text":"from_geo sf input data aggregated to_geo sf polygons multipolygons aggregate whichcrs desired crs. Either numeric EPSG crs definition, sf::st_crs()","code":""},{"path":"https://galenholt.github.io/HydroBOT/reference/spatial_joiner.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Joins spatial from and to sf objects with needed data prep for the aggregate functions — spatial_joiner","text":"tibble (sf) polyID column mapping row relevant polygon polyID area column area polygon resulting intersection from_geo to_geo. Rows match to_geo to_geo intersected from_geo, row unique combination two (from_geo rows may duplicated across several to_geo polygons). unique polygons area calculated added column. geometry dropped speed, expected add back later dplyr::left_join to_geo aggregation processing.","code":""},{"path":"https://galenholt.github.io/HydroBOT/reference/temporal_aggregate.html","id":null,"dir":"Reference","previous_headings":"","what":"Aggregate along the time dimension — temporal_aggregate","title":"Aggregate along the time dimension — temporal_aggregate","text":"Takes data column time format (posix date) aggregates groups defined breaks retaining theme spatial information. Much setup checks mirrors theme_aggregate() spatial_aggregate(), passes general_aggregate().","code":""},{"path":"https://galenholt.github.io/HydroBOT/reference/temporal_aggregate.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Aggregate along the time dimension — temporal_aggregate","text":"","code":"temporal_aggregate(   dat,   breaks = \"all_time\",   timecol = \"infer\",   groupers,   aggCols,   funlist,   geonames = NULL,   prefix = \"temporal_\",   failmissing = TRUE,   auto_ewr_PU = FALSE,   ... )"},{"path":"https://galenholt.github.io/HydroBOT/reference/temporal_aggregate.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Aggregate along the time dimension — temporal_aggregate","text":"dat sf tibble dataframe values aggregate, necessary grouping information non-temporal axes (e.g. scenario, location, theme). necessarily data general_aggregate()- function makes necessary adjustments data calling general_aggregate() breaks breaks time groupings. default 'all_time' collapses whole period, otherwise base::cut.POSIXt() (takes character options , time objects) timecol name column time . Default 'infer' infers looking POSIXt Date types. groupers general_aggregate(), note grouping columns except spatial information. Spatial information automatically added groupers passing general_aggregate(). aggCols expression columns aggregate (data columns). See selectcreator formats funlist list functions arguments used aggregate data. See functionlister creation many cases. situation bare anonymous function, e.g. ~mean(., na.rm = T) supported need name. Use named list using anonymous functions, e.g. list(mean = ~mean(., na.rm = T)). using functions data-variable argument, e.g. weighted.mean column weights, now (dplyr 1.1) workarounds. One option specified function argument, function can just go bare name anonymous. specified elsewhere, can wrapped rlang::quo(), e.g. agglist <- rlang::quo(list(mean = mean, wm = ~weighted.mean(., weight_column_name, na.rm = T))). , now internal workaround add seems stable may cause unforeseen issues. workaround also allows building custom aggregation functions (-anonymous) data-variable argument either exposed hardcoded (see SpatialWeightedMean()). error checks names work quosures, make sure name list using rlang::quo(). geonames additional columns information persist aggregation. change main groupers. Developed persist information polygons subsequent theme aggregations, general prefix prefix character, differs general_aggregate() default 'temporal_' instead 'agg_'. failmissing logical, default TRUE: fail requested grouping aggregation columns exist. FALSE, proceed exist silently drop . Similar tidyselect::all_of() vs tidyselect::any_of() tidyselect auto_ewr_PU logical, default FALSE. TRUE, automatically infers whether EWR dataset yet spatially aggregated. , applies grouping 'planning_unit_name' SWSDLName' since EWRs defined units. preferred solution include groupers (-), multi_aggregate() use group_until. none solutions happen, though, aborts prevent incorrect pooling rows different planning units sdl units. ... arguments passed aggregation functions. limited, work data arguments conditions. Almost always better specify explicitly building funlist, works OK simple functions, e.g. passing na.rm = TRUE mean","code":""},{"path":"https://galenholt.github.io/HydroBOT/reference/temporal_aggregate.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Aggregate along the time dimension — temporal_aggregate","text":"tibble (possibly sf fed sf) columns grouping variables aggregated time periods specified breaks","code":""},{"path":"https://galenholt.github.io/HydroBOT/reference/test_overplotting.html","id":null,"dir":"Reference","previous_headings":"","what":"Check silent overplotting — test_overplotting","title":"Check silent overplotting — test_overplotting","text":"Fill maps heatmaps can silently plot multiple values top . checks data dimension ensure single value plotted","code":""},{"path":"https://galenholt.github.io/HydroBOT/reference/test_overplotting.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Check silent overplotting — test_overplotting","text":"","code":"test_overplotting(   data,   facet_wrapper,   facet_row,   facet_col,   x_col = NULL,   y_col = NULL )"},{"path":"https://galenholt.github.io/HydroBOT/reference/test_overplotting.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Check silent overplotting — test_overplotting","text":"data prepped data plotted facet_wrapper NULL (default) character column use facet_wrap facet_row NULL (default) character facet row. Can '.' one row column-facets facet_col NULL (default) character facet column. Can '.' one column row-facets x_col character, name column x-axis. Default 'scenario' y_col character, default outcome_col. Allows separately specifying y-axis outcome (e.g. maps, heatmaps, networks)","code":""},{"path":"https://galenholt.github.io/HydroBOT/reference/test_overplotting.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Check silent overplotting — test_overplotting","text":"TRUE overplotting, otherwise aborts","code":""},{"path":"https://galenholt.github.io/HydroBOT/reference/theme_aggregate.html","id":null,"dir":"Reference","previous_headings":"","what":"Aggregate along theme dimension — theme_aggregate","title":"Aggregate along theme dimension — theme_aggregate","text":"Aggregation along theme dimension uses causal mappings aggregate lower higher levels. function sets data specific prep way theme dimension works, wraps general_aggregate(). Many arguments just passed general aggregate.","code":""},{"path":"https://galenholt.github.io/HydroBOT/reference/theme_aggregate.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Aggregate along theme dimension — theme_aggregate","text":"","code":"theme_aggregate(   dat,   from_theme,   to_theme,   groupers,   aggCols,   funlist,   causal_edges,   geonames = NULL,   failmissing = TRUE,   auto_ewr_PU = FALSE,   ... )"},{"path":"https://galenholt.github.io/HydroBOT/reference/theme_aggregate.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Aggregate along theme dimension — theme_aggregate","text":"dat sf tibble dataframe values aggregate, necessary grouping information non-theme axis (e.g. scenario, location). necessarily data general_aggregate()- function makes necessary adjustments data calling general_aggregate() from_theme character, column name theme level data currently to_theme character, column name theme level aggregate groupers general_aggregate(), note grouping columns except theme column specified to_theme spatial information. automatically added groupers passing general_aggregate(). aggCols expression columns aggregate (data columns). See selectcreator formats funlist list functions arguments used aggregate data. See functionlister creation many cases. situation bare anonymous function, e.g. ~mean(., na.rm = T) supported need name. Use named list using anonymous functions, e.g. list(mean = ~mean(., na.rm = T)). using functions data-variable argument, e.g. weighted.mean column weights, now (dplyr 1.1) workarounds. One option specified function argument, function can just go bare name anonymous. specified elsewhere, can wrapped rlang::quo(), e.g. agglist <- rlang::quo(list(mean = mean, wm = ~weighted.mean(., weight_column_name, na.rm = T))). , now internal workaround add seems stable may cause unforeseen issues. workaround also allows building custom aggregation functions (-anonymous) data-variable argument either exposed hardcoded (see SpatialWeightedMean()). error checks names work quosures, make sure name list using rlang::quo(). causal_edges causal links theme levels. Needs include from_theme to_theme, can also include others. Creates theme grouping geonames additional columns information persist aggregation. change main groupers. Developed persist information polygons subsequent theme aggregations, general failmissing logical, default TRUE: fail requested grouping aggregation columns exist. FALSE, proceed exist silently drop . Similar tidyselect::all_of() vs tidyselect::any_of() tidyselect auto_ewr_PU logical, default FALSE. TRUE, automatically infers whether EWR dataset yet spatially aggregated. , applies grouping 'planning_unit_name' SWSDLName' since EWRs defined units. preferred solution include groupers (-), multi_aggregate() use group_until. none solutions happen, though, aborts prevent incorrect pooling rows different planning units sdl units. ... passed general_aggregate()","code":""},{"path":"https://galenholt.github.io/HydroBOT/reference/theme_aggregate.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Aggregate along theme dimension — theme_aggregate","text":"dataframe format read-(sf tibble), aggregated to_theme level retaining desired geographic information included","code":""},{"path":"https://galenholt.github.io/HydroBOT/reference/theme_hydrobot.html","id":null,"dir":"Reference","previous_headings":"","what":"A standard ggplot theme for HydroBOT — theme_hydrobot","title":"A standard ggplot theme for HydroBOT — theme_hydrobot","text":"standard ggplot theme HydroBOT","code":""},{"path":"https://galenholt.github.io/HydroBOT/reference/theme_hydrobot.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"A standard ggplot theme for HydroBOT — theme_hydrobot","text":"","code":"theme_hydrobot(base_size = 10, ...)"},{"path":"https://galenholt.github.io/HydroBOT/reference/theme_hydrobot.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"A standard ggplot theme for HydroBOT — theme_hydrobot","text":"base_size set base_size ggplot themes ... arguments ggplot2::theme()","code":""},{"path":"https://galenholt.github.io/HydroBOT/reference/theme_hydrobot.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"A standard ggplot theme for HydroBOT — theme_hydrobot","text":"ggplot theme","code":""},{"path":"https://galenholt.github.io/HydroBOT/reference/theme_hydrobot.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"A standard ggplot theme for HydroBOT — theme_hydrobot","text":"","code":"ggplot2::ggplot(iris,   ggplot2::aes(x = Sepal.Length, y = Sepal.Width, color = Species)) +   ggplot2::geom_point() +   theme_hydrobot()"},{"path":"https://galenholt.github.io/HydroBOT/reference/type_cleanup.html","id":null,"dir":"Reference","previous_headings":"","what":"Sometimes single values come in as characters instead of lists — type_cleanup","title":"Sometimes single values come in as characters instead of lists — type_cleanup","text":"Sometimes single values come characters instead lists","code":""},{"path":"https://galenholt.github.io/HydroBOT/reference/type_cleanup.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Sometimes single values come in as characters instead of lists — type_cleanup","text":"","code":"type_cleanup(arglist)"},{"path":"https://galenholt.github.io/HydroBOT/reference/type_cleanup.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Sometimes single values come in as characters instead of lists — type_cleanup","text":"arglist list arguments","code":""}]
